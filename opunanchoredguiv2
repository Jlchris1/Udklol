local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer

local blackHoleActive = false
local toggleState = false
local targetPlayer = nil
local switchDelay = 0.13
local processedParts = {}
local initiallyAnchoredParts = {}
local anchoredOnce = false
local unanchorTimerRunning = false
local unanchorCoroutine

local noclipConnection

local Attachment1 = nil

-- Setup initial Attachment
local function setupPlayer()
    local Folder = Instance.new("Folder", Workspace)
    local Part = Instance.new("Part", Folder)
    Part.Anchored = true
    Part.CanCollide = false
    Part.Transparency = 1
    local Attachment = Instance.new("Attachment", Part)
    return Attachment
end

Attachment1 = setupPlayer()

-- Detect if a character is an NPC (has Humanoid but not a player character)
local function isNPC(character)
    if not character or not character:IsA("Model") then return false end

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid and not Players:GetPlayerFromCharacter(character) then
        return true
    end
    return false
end

-- Enable or disable collisions on a character's parts
local function setCharacterCollision(character, canCollide)
    if not character then return end
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = canCollide
        end
    end
end

-- Enable noclip for local player but keep collisions with their own parts ON
local function enableLocalPlayerNoclip(enable)
    if enable then
        -- Disconnect previous connection if any
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end

        noclipConnection = RunService.Stepped:Connect(function()
            local character = localPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                for _, part in ipairs(character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        -- Only disable collisions with world geometry, keep collisions with player's parts
                        -- So set CanCollide = false only for parts not belonging to the character
                        -- But here we want the local player's parts to keep CanCollide = true
                        -- So nothing changes for player's own parts here

                        -- Also, to noclip through the world, we temporarily disable collision on HumanoidRootPart with world geometry
                        -- The easiest way: force HumanoidRootPart.CanCollide = false
                        -- But keep all other character parts CanCollide = true to prevent phasing inside themselves

                        if part.Name == "HumanoidRootPart" then
                            part.CanCollide = false
                        else
                            part.CanCollide = true
                        end
                    end
                end
            end
        end)
    else
        if noclipConnection then
            noclipConnection:Disconnect()
            noclipConnection = nil
        end
        -- Reset collisions on local player parts
        local character = localPlayer.Character
        if character then
            setCharacterCollision(character, true)
        end
    end
end

local function ForcePart(v)
    if v:IsA("BasePart")
        and not v.Anchored
        and v.Name ~= "Handle"
        and not v:IsDescendantOf(localPlayer.Character)
        and (
            (v.Parent:FindFirstChildOfClass("Humanoid") and isNPC(v.Parent))
            or (not v.Parent:FindFirstChildOfClass("Humanoid") and not v.Parent:FindFirstChild("Head"))
        ) then

        if processedParts[v] then return end
        processedParts[v] = true

        for _, x in next, v:GetChildren() do
            if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or x:IsA("BodyPosition") or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or x:IsA("RocketPropulsion") then
                x:Destroy()
            end
        end
        if v:FindFirstChild("Attachment") then v:FindFirstChild("Attachment"):Destroy() end
        if v:FindFirstChild("AlignPosition") then v:FindFirstChild("AlignPosition"):Destroy() end
        if v:FindFirstChild("Torque") then v:FindFirstChild("Torque"):Destroy() end

        v.CanCollide = false -- parts affected by ForcePart should not collide with anything

        local Torque = Instance.new("Torque", v)
        Torque.Torque = Vector3.new(1e6, 1e6, 1e6)
        local AlignPosition = Instance.new("AlignPosition", v)
        local Attachment2 = Instance.new("Attachment", v)
        Torque.Attachment0 = Attachment2
        AlignPosition.MaxForce = math.huge
        AlignPosition.MaxVelocity = math.huge
        AlignPosition.Responsiveness = 500
        AlignPosition.Attachment0 = Attachment2
        AlignPosition.Attachment1 = Attachment1
    end
end

local function clearProcessedParts()
    for part, _ in pairs(processedParts) do
        if part and part.Parent then
            for _, x in next, part:GetChildren() do
                if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or x:IsA("BodyPosition") or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or x:IsA("RocketPropulsion") then
                    x:Destroy()
                end
            end
            if part:FindFirstChild("Attachment") then part:FindFirstChild("Attachment"):Destroy() end
            if part:FindFirstChild("AlignPosition") then part:FindFirstChild("AlignPosition"):Destroy() end
            if part:FindFirstChild("Torque") then part:FindFirstChild("Torque"):Destroy() end
            part.CanCollide = true
            if not initiallyAnchoredParts[part] then
                part.Anchored = false
            else
                part.Anchored = true
            end
        end
    end
    processedParts = {}
    initiallyAnchoredParts = {}
    anchoredOnce = false
end

local function disableCollisionsForCharacterButNotWorldCollision(character)
    if not character then return end
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            -- To prevent collision with world but allow collisions with other parts:
            -- We can set CanCollide = true but set CollisionGroup to a group that ignores world collision
            -- Since Roblox collision groups cannot be defined here, a workaround is to disable CanCollide and selectively re-enable on parts standing on.
            -- For simplicity, set CanCollide = true for all parts now (per your request) and rely on noclip for player for world.
            -- So just keep CanCollide = true for NPCs
            part.CanCollide = true
        end
    end
end

local function anchorAndDelayedUnanchorParts()
    unanchorTimerRunning = true

    local candidateParts = {}
    for _, v in ipairs(Workspace:GetDescendants()) do
        if v:IsA("BasePart")
            and not v.Anchored
            and v.Name ~= "Handle"
            and not v:IsDescendantOf(localPlayer.Character)
            and (
                (v.Parent:FindFirstChildOfClass("Humanoid") and isNPC(v.Parent))
                or (not v.Parent:FindFirstChildOfClass("Humanoid") and not v.Parent:FindFirstChild("Head"))
            ) then
            table.insert(candidateParts, v)
        end
    end

    initiallyAnchoredParts = {}
    for _, part in ipairs(candidateParts) do
        initiallyAnchoredParts[part] = false
        part.Anchored = true
        part.CanCollide = false
    end

    -- Enable collisions for NPC characters
    for _, npcCandidate in ipairs(Workspace:GetChildren()) do
        if isNPC(npcCandidate) then
            disableCollisionsForCharacterButNotWorldCollision(npcCandidate)
        end
    end

    -- Disable collisions for local player parts except keep CanCollide true for all parts of the local player
    local character = localPlayer.Character
    if character then
        setCharacterCollision(character, true)
    end

    -- Enable noclip for local player (so they don't collide with world)
    enableLocalPlayerNoclip(true)

    local startTime = tick()
    while blackHoleActive and tick() - startTime < 10 do
        wait(0.1)
    end

    -- After 10 seconds unanchor parts marked earlier and apply ForcePart
    for _, part in ipairs(candidateParts) do
        if part and part.Parent and initiallyAnchoredParts[part] == false then
            part.Anchored = false
            ForcePart(part)
        end
    end

    unanchorTimerRunning = false
    anchoredOnce = true
end

local descendantAddedConn

local function processWorkspaceParts()
    if descendantAddedConn then
        descendantAddedConn:Disconnect()
        descendantAddedConn = nil
    end

    if blackHoleActive then
        if not unanchorTimerRunning and not anchoredOnce then
            unanchorCoroutine = coroutine.create(anchorAndDelayedUnanchorParts)
            coroutine.resume(unanchorCoroutine)
        end

        descendantAddedConn = Workspace.DescendantAdded:Connect(function(v)
            if blackHoleActive then
                if v:IsA("BasePart") and not v.Anchored then
                    ForcePart(v)
                end
            end
        end)
    end
end

local function getRandomPlayer()
    local players = Players:GetPlayers()
    local validPlayers = {}
    for _, player in pairs(players) do
        if player ~= localPlayer and (not player:FindFirstChild("Whitelisted") or not player.Whitelisted.Value) then
            table.insert(validPlayers, player)
        end
    end
    if #validPlayers > 0 then
        return validPlayers[math.random(1, #validPlayers)]
    end
    return nil
end

local function getSelectedPlayers()
    local players = Players:GetPlayers()
    local selectedPlayers = {}
    for _, player in pairs(players) do
        if player ~= localPlayer and player:FindFirstChild("Selected") and player.Selected.Value then
            table.insert(selectedPlayers, player)
        end
    end
    return selectedPlayers
end

local function toggleBlackHole()
    blackHoleActive = toggleState
    if blackHoleActive then
        local newAttachment = Instance.new("Attachment", localPlayer.Character.HumanoidRootPart)
        if Attachment1 then Attachment1:Destroy() end
        Attachment1 = newAttachment
        anchoredOnce = false
        processWorkspaceParts()
        spawn(function()
            while blackHoleActive do
                targetPlayer = getRandomPlayer()
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    Attachment1.WorldCFrame = CFrame.new(targetPlayer.Character.HumanoidRootPart.Position)
                end
                wait(switchDelay)
            end
        end)
    else
        blackHoleActive = false
        enableLocalPlayerNoclip(false) -- disable noclip
        if unanchorTimerRunning and unanchorCoroutine then
            unanchorTimerRunning = false
            for part, anchored in pairs(initiallyAnchoredParts) do
                if part and part.Parent and anchored == false then
                    part.Anchored = false
                    ForcePart(part)
                end
            end
        end
        clearProcessedParts()
    end
end

local function toggleTargetSelected()
    blackHoleActive = toggleState
    if blackHoleActive then
        local newAttachment = Instance.new("Attachment", localPlayer.Character.HumanoidRootPart)
        if Attachment1 then Attachment1:Destroy() end
        Attachment1 = newAttachment
        anchoredOnce = false
        processWorkspaceParts()
        spawn(function()
            while blackHoleActive do
                local selectedPlayers = getSelectedPlayers()
                if #selectedPlayers > 0 then
                    targetPlayer = selectedPlayers[math.random(1, #selectedPlayers)]
                else
                    targetPlayer = nil
                end
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    Attachment1.WorldCFrame = CFrame.new(targetPlayer.Character.HumanoidRootPart.Position)
                end
                wait(switchDelay)
            end
        end)
    else
        blackHoleActive = false
        enableLocalPlayerNoclip(false) -- disable noclip
        if unanchorTimerRunning and unanchorCoroutine then
            unanchorTimerRunning = false
            for part, anchored in pairs(initiallyAnchoredParts) do
                if part and part.Parent and anchored == false then
                    part.Anchored = false
                    ForcePart(part)
                end
            end
        end
        clearProcessedParts()
    end
end

local function onCharacterAdded(character)
    if blackHoleActive then
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local newAttachment = Instance.new("Attachment", humanoidRootPart)
        if Attachment1 then Attachment1:Destroy() end
        Attachment1 = newAttachment
        processedParts = {}
        processWorkspaceParts()
    end
end

localPlayer.CharacterAdded:Connect(onCharacterAdded)

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/miroeramaa/TurtleLib/main/TurtleUiLib.lua"))()
local window = library:Window("made by ÆS productions")

window:Toggle("Unanchored Target All", false, function(Value)
    toggleState = Value
    blackHoleActive = Value
    toggleBlackHole()
end)

window:Toggle("Target Selected Players", false, function(Value)
    toggleState = Value
    blackHoleActive = Value
    toggleTargetSelected()
end)

window:Button("Load Player List Script", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Jlchris1/Udklol/refs/heads/main/Playerlistv6"))()
end)

window:Button("telekinesis/fix target", function()
    loadstring(game:HttpGet(('https://raw.githubusercontent.com/SAZXHUB/Control-update/main/README.md'), true))()
end)

local loopCheckActive = false

window:Toggle("Continuous Loop Check", false, function(Value)
    loopCheckActive = Value
    if loopCheckActive then
        spawn(function()
            while loopCheckActive do
                if blackHoleActive then
                    for _, v in ipairs(Workspace:GetDescendants()) do
                        if v:IsA("BasePart") and not v.Anchored and not processedParts[v] then
                            ForcePart(v)
                        end
                    end
                end
                wait(0.5)
            end
        end)
    end
end)
