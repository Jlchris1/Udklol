local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local blackHoleActive = false
local toggleState = false -- Tracks the state of the toggle
local targetPlayer = nil
local switchDelay = 0.13 -- Default delay in seconds for switching targets
local processedParts = {} -- Table to store parts already processed

local localPlayer = Players.LocalPlayer
local targetPosition = Vector3.new(0, 0, 0)

-- Function to setup player and create a folder for attachments
local function setupPlayer()
    local Folder = Instance.new("Folder", Workspace)
    local Part = Instance.new("Part", Folder)
    local Attachment1 = Instance.new("Attachment", Part)
    Part.Anchored = true
    Part.CanCollide = false
    Part.Transparency = 1

    return Attachment1
end

local Attachment1 = setupPlayer()

-- Function to apply force to unanchored parts
local function ForcePart(v)
    -- Ensure the part is unanchored, not already processed, and not inside the local player's character
    if v:IsA("BasePart") 
        and not v.Anchored 
        and not v.Parent:FindFirstChild("Humanoid") -- Exclude player parts
        and not v.Parent:FindFirstChild("Head") 
        and v.Name ~= "Handle" 
        and not v:IsDescendantOf(localPlayer.Character) then
        
        -- Prevent re-processing the same part
        if processedParts[v] then return end
        processedParts[v] = true

        -- Clean up any previous forces or constraints
        for _, x in next, v:GetChildren() do
            if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or x:IsA("BodyPosition") or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or x:IsA("RocketPropulsion") then
                x:Destroy()
            end
        end
        if v:FindFirstChild("Attachment") then
            v:FindFirstChild("Attachment"):Destroy()
        end
        if v:FindFirstChild("AlignPosition") then
            v:FindFirstChild("AlignPosition"):Destroy()
        end
        if v:FindFirstChild("Torque") then
            v:FindFirstChild("Torque"):Destroy()
        end
        v.CanCollide = false

        -- Create new attachment and force components
        local Torque = Instance.new("Torque", v)
        Torque.Torque = Vector3.new(1000000, 1000000, 1000000)
        local AlignPosition = Instance.new("AlignPosition", v)
        local Attachment2 = Instance.new("Attachment", v)
        Torque.Attachment0 = Attachment2
        AlignPosition.MaxForce = math.huge
        AlignPosition.MaxVelocity = math.huge
        AlignPosition.Responsiveness = 500
        AlignPosition.Attachment0 = Attachment2
        AlignPosition.Attachment1 = Attachment1
    end
end

-- Function to remove forces and reset processed parts
local function clearProcessedParts()
    for part, _ in pairs(processedParts) do
        -- Remove forces and reset the part to its original state
        if part and part.Parent then
            for _, x in next, part:GetChildren() do
                if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or
                   x:IsA("BodyPosition") or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or
                   x:IsA("RocketPropulsion") then
                    x:Destroy()
                end
            end
            if part:FindFirstChild("Attachment") then
                part:FindFirstChild("Attachment"):Destroy()
            end
            if part:FindFirstChild("AlignPosition") then
                part:FindFirstChild("AlignPosition"):Destroy()
            end
            if part:FindFirstChild("Torque") then
                part:FindFirstChild("Torque"):Destroy()
            end
            part.CanCollide = true -- Restore collision
        end
    end

    -- Clear the processedParts table
    processedParts = {}
end

-- Function to process all unanchored parts in the workspace
local function processWorkspaceParts()
    for _, v in next, Workspace:GetDescendants() do
        ForcePart(v)
    end

    -- Continuously monitor new parts added to the workspace
    Workspace.DescendantAdded:Connect(function(v)
        if blackHoleActive then
            ForcePart(v)
        end
    end)
end

-- Function to get selected players (players with a "Selected" BoolValue set to true)
local function getSelectedPlayers()
    local players = Players:GetPlayers()
    local selectedPlayers = {}
    for _, player in pairs(players) do
        if player ~= localPlayer and player:FindFirstChild("Selected") and player.Selected.Value then
            table.insert(selectedPlayers, player)
        end
    end
    return selectedPlayers
end

-- Function to toggle the black hole effect (for unanchored target all)
local function toggleBlackHole()
    blackHoleActive = toggleState -- Ensure blackHoleActive is synced with toggleState

    if blackHoleActive then
        -- Create a new attachment and destroy the old one for an instant start
        local newAttachment = Instance.new("Attachment", localPlayer.Character.HumanoidRootPart)
        newAttachment.Parent = localPlayer.Character.HumanoidRootPart
        Attachment1:Destroy() -- Destroy the old attachment immediately
        Attachment1 = newAttachment -- Update the reference to the new attachment
        
        processWorkspaceParts() -- Process parts and monitor new ones

        -- Start target switching loop for selected players
        spawn(function()
            while blackHoleActive do
                local selectedPlayers = getSelectedPlayers()
                if #selectedPlayers > 0 then
                    targetPlayer = selectedPlayers[math.random(1, #selectedPlayers)]
                else
                    -- If no players are selected, keep parts at the toggled spot
                    targetPlayer = nil
                end

                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local targetPosition = targetPlayer.Character.HumanoidRootPart.Position
                    Attachment1.WorldCFrame = CFrame.new(targetPosition)
                end

                wait(switchDelay) -- Delay between target switches
            end
        end)

    else
        clearProcessedParts() -- Disable all effects when the black hole is deactivated
    end
end

-- Handle player respawn (reset targeting system for selected players)
local function onCharacterAdded(character)
    -- Reset targeting and reapply the effects when the character respawns
    if blackHoleActive then
        -- Wait for humanoidRootPart to load and then reinitialize attachments and force
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local newAttachment = Instance.new("Attachment", humanoidRootPart)
        newAttachment.Parent = humanoidRootPart
        Attachment1:Destroy() -- Destroy the old attachment immediately
        Attachment1 = newAttachment -- Update the reference to the new attachment
        
        processedParts = {} -- Clear processed parts
        processWorkspaceParts() -- Reprocess all parts in the workspace
    end
end

-- Reapply targeting effects even if player dies
localPlayer.CharacterAdded:Connect(onCharacterAdded)

-- GUI library setup
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/miroeramaa/TurtleLib/main/TurtleUiLib.lua"))()
local window = library:Window("made by Ã†S productions")

-- Toggle for Unanchored Target All Players
window:Toggle("Unanchored Target All", false, function(Value)
    toggleState = Value -- Update toggle state
    blackHoleActive = Value -- Sync blackHoleActive with toggle state
    toggleBlackHole() -- Call the toggle function to apply changes
end)

-- Toggle for Unanchored Target Selected Players
window:Toggle("Target Selected Players", false, function(Value)
    toggleState = Value -- Update toggle state
    blackHoleActive = Value -- Sync blackHoleActive with toggle state
    toggleBlackHole() -- Call the target selected function to apply changes
end)

-- Add a button to fire the loadstring you provided
window:Button("Load Player List Script", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Jlchris1/Udklol/refs/heads/main/Playerlistv6"))()
end)

-- Button to trigger some action
window:Button("telekinesis/fix target", function()
  loadstring(game:HttpGet(('https://raw.githubusercontent.com/SAZXHUB/Control-update/main/README.md'),true))()
end)
