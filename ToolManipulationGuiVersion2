-- KillAura_SeparateGUI.lua
-- Separate GUI (opposite side) for kill-aura, tool-handle sizing, and HRP adjustments.
-- Intended to run as a LocalScript (StarterPlayerScripts / StarterGui). Does NOT affect local player (skip self).

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- CONFIG
local defaultLoopRate = 0.08 -- seconds between kill-aura cycles

-- GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "KillAuraGui"
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
screenGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 380, 0, 520)
mainFrame.Position = UDim2.new(1, -390, 0.5, -260) -- Opposite side of screen
mainFrame.AnchorPoint = Vector2.new(0, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
mainFrame.BackgroundTransparency = 0.05
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

local function createLabel(parent, text, y)
	local lbl = Instance.new("TextLabel")
	lbl.Size = UDim2.new(1, -20, 0, 20)
	lbl.Position = UDim2.new(0, 10, 0, y)
	lbl.BackgroundTransparency = 1
	lbl.Text = text
	lbl.TextXAlignment = Enum.TextXAlignment.Left
	lbl.TextColor3 = Color3.new(1,1,1)
	lbl.Font = Enum.Font.SourceSans
	lbl.TextSize = 16
	lbl.Parent = parent
	return lbl
end

local function createTextBox(parent, placeholder, y)
	local tb = Instance.new("TextBox")
	tb.Size = UDim2.new(1, -20, 0, 30)
	tb.Position = UDim2.new(0, 10, 0, y)
	tb.PlaceholderText = placeholder
	tb.Text = ""
	tb.BackgroundColor3 = Color3.fromRGB(230,230,230)
	tb.Parent = parent
	return tb
end

local function createToggle(parent, text, y)
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(1, -20, 0, 36)
	btn.Position = UDim2.new(0, 10, 0, y)
	btn.Text = text .. " : OFF"
	btn.BackgroundColor3 = Color3.fromRGB(200,200,200)
	btn.Parent = parent
	return btn
end

-- UI Elements
createLabel(mainFrame, "Kill-Aura / Tool & HRP Utilities", 6)

local rangeBox = createTextBox(mainFrame, "Kill aura range (studs)", 36)
local enableKillToggle = createToggle(mainFrame, "Enable Kill Aura (skip whitelisted)", 76)

createLabel(mainFrame, "Tool Handle Size (number) - only adjusts Handle (Part/Mesh)", 116)
local toolSizeBox = createTextBox(mainFrame, "Tool handle size (e.g. 1 or 2)", 146)
local autoToolSizeToggle = createToggle(mainFrame, "Auto-adjust Tool Size (to range)", 186)

createLabel(mainFrame, "Other players HumanoidRootPart size (studs) - collisions off", 226)
local hrpSizeBox = createTextBox(mainFrame, "HRP size (e.g. 2)", 256)
local loopHrpAdjustToggle = createToggle(mainFrame, "Loop HRP adjust (skip whitelisted)", 296)
local hrpSelectedAdjustToggle = createToggle(mainFrame, "Adjust Selected Players' HRP only", 336)

local autoKillSelectedToggle = createToggle(mainFrame, "Auto Kill-Aura (Selected only)", 376)

-- State
local state = {
	killAuraEnabled = false,
	autoKillSelected = false,
	autoToolSize = false,
	loopHrpAdjust = false,
	hrpSelectedOnly = false,
	killAuraRange = 8,
	toolHandleSize = 1,
	hrpSizeValue = 2,
}

-- Utility helpers
local function safeNumberFromTextBox(tb, fallback)
	local n = tonumber(tb.Text)
	if n and n > 0 then return n end
	return fallback
end

local function isWhitelisted(plr)
	local ok, val = pcall(function()
		local b = plr:FindFirstChild("Whitelisted")
		return b and b:IsA("BoolValue") and b.Value
	end)
	return ok and val
end

local function isSelected(plr)
	local ok, val = pcall(function()
		local b = plr:FindFirstChild("Selected")
		return b and b:IsA("BoolValue") and b.Value
	end)
	return ok and val
end

local function getMyHRP()
	local char = player.Character
	if not char then return nil end
	return char:FindFirstChild("HumanoidRootPart")
end

-- Make local tools' handle massless and optionally resize handle (affects only local player's tools)
local function applyToolHandleSizeToLocalTools(size)
	local char = player.Character
	if not char then return end
	for _, tool in pairs(char:GetChildren()) do
		if tool:IsA("Tool") and tool:FindFirstChild("Handle") then
			local handle = tool.Handle
			-- Make massless
			pcall(function() handle.Massless = true end)
			-- If handle is a Mesh part and has a SpecialMesh or Mesh, adjust Scale/Size
			pcall(function()
				-- If SpecialMesh
				local mesh = handle:FindFirstChildOfClass("SpecialMesh") or handle:FindFirstChildOfClass("Mesh")
				if mesh then
					-- Scale mesh so its longest component approximates 'size'
					mesh.Scale = Vector3.new(size, size, size)
					-- Also ensure part has Size large enough
					handle.Size = Vector3.new(size, size, size)
				else
					handle.Size = Vector3.new(size, size, size)
				end
			end)
		end
	end
end

-- Teleport attached tools (inside Shirt or Humanoid parent) to a target player's HRP
local function teleportAttachedToolsToTarget(targetPlayer)
	if not targetPlayer or not targetPlayer.Character then return end
	local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
	if not targetHRP then return end
	local myChar = player.Character
	if not myChar then return end
	local shirt = myChar:FindFirstChild("Shirt") or myChar:FindFirstChild("Humanoid")
	if not shirt then return end
	for _, t in pairs(shirt:GetChildren()) do
		if t:IsA("Tool") and t:FindFirstChild("Handle") then
			local ok, _ = pcall(function()
				local h = t.Handle
				h.Massless = true
				h.Position = targetHRP.Position
			end)
		end
	end
end

-- Teleport normal (equipped/not attached) local tools to target player's HRP
local function teleportNormalToolsToTarget(targetPlayer)
	if not targetPlayer or not targetPlayer.Character then return end
	local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
	if not targetHRP then return end
	local myChar = player.Character
	if not myChar then return end
	for _, t in pairs(myChar:GetChildren()) do
		if t:IsA("Tool") and t:FindFirstChild("Handle") then
			pcall(function()
				local h = t.Handle
				h.Massless = true
				h.Position = targetHRP.Position
			end)
		end
	end
end

-- Find players in range (optionally selected-only, skipping whitelist)
local function playersInRange(range, selectedOnly, skipWhitelisted)
	local result = {}
	local myHRP = getMyHRP()
	if not myHRP then return result end
	for _, pl in pairs(Players:GetPlayers()) do
		if pl ~= player then
			if pl.Character and pl.Character:FindFirstChild("HumanoidRootPart") then
				if skipWhitelisted and isWhitelisted(pl) then
					-- skip
				else
					if selectedOnly and not isSelected(pl) then
						-- skip
					else
						local hrp = pl.Character:FindFirstChild("HumanoidRootPart")
						local dist = (hrp.Position - myHRP.Position).Magnitude
						if dist <= range then
							table.insert(result, pl)
						end
					end
				end
			end
		end
	end
	return result
end

-- Kill aura main loop (teleports both attached and normal tools to targets in range)
local killAuraRunning = false
local function killAuraLoop()
	killAuraRunning = true
	while state.killAuraEnabled do
		local range = state.killAuraRange or 8
		local selectedOnly = state.autoKillSelected
		local targets = playersInRange(range, selectedOnly, true) -- always skip whitelisted
		for _, tgt in ipairs(targets) do
			-- teleport attached and normal tools to target
			teleportAttachedToolsToTarget(tgt)
			teleportNormalToolsToTarget(tgt)
		end
		task.wait(defaultLoopRate)
	end
	killAuraRunning = false
end

-- HRP size adjust loop
local hrpAdjustRunning = false
local function hrpAdjustLoop()
	hrpcAdjustRunning = true
	while state.loopHrpAdjust do
		local sizeVal = state.hrpSizeValue or 2
		local selectedOnly = state.hrpSelectedOnly
		for _, pl in pairs(Players:GetPlayers()) do
			if pl ~= player then
				if pl.Character and pl.Character:FindFirstChild("HumanoidRootPart") then
					if isWhitelisted(pl) then
						-- skip whitelisted
					else
						if selectedOnly and not isSelected(pl) then
							-- skip non-selected
						else
							local hrp = pl.Character:FindFirstChild("HumanoidRootPart")
							pcall(function()
								hrq = hrp -- no-op to ensure hrp exists
								hrp.Size = Vector3.new(sizeVal, sizeVal, sizeVal)
								hrp.CanCollide = false
							end)
						end
					end
				end
			end
		end
		task.wait(0.5)
	end
	hrq = nil
	hrspAdjustRunning = false
end

-- Single-run HRP adjust for selected players (not loop)
local function adjustSelectedPlayersHRPOnce()
	local sizeVal = state.hrpSizeValue or 2
	for _, pl in pairs(Players:GetPlayers()) do
		if pl ~= player then
			if isSelected(pl) and pl.Character and pl.Character:FindFirstChild("HumanoidRootPart") and not isWhitelisted(pl) then
				pcall(function()
					local hrp = pl.Character:FindFirstChild("HumanoidRootPart")
					hr.Size = nil
					hrpr = hrp
					hrpr.Size = Vector3.new(sizeVal, sizeVal, sizeVal)
					hrpr.CanCollide = false
				end)
			end
		end
	end
end

-- UI interactions
-- Toggle helpers
local function setToggle(btn, enabled)
	if enabled then
		btn.BackgroundColor3 = Color3.fromRGB(120, 200, 120)
		btn.Text = btn.Text:match("^[^:]+") .. " : ON"
	else
		btn.BackgroundColor3 = Color3.fromRGB(200,200,200)
		btn.Text = btn.Text:match("^[^:]+") .. " : OFF"
	end
end

-- Connect toggles and boxes
enableKillToggle.MouseButton1Click:Connect(function()
	state.killAuraEnabled = not state.killAuraEnabled
	setToggle(enableKillToggle, state.killAuraEnabled)
	-- start/stop loop
	if state.killAuraEnabled and not killAuraRunning then
		state.killAuraRange = safeNumberFromTextBox(rangeBox, state.killAuraRange)
		task.spawn(killAuraLoop)
	end
end)

rangeBox.FocusLost:Connect(function()
	state.killAuraRange = safeNumberFromTextBox(rangeBox, state.killAuraRange)
	-- if auto-tool-size on, adjust immediately
	if state.autoToolSize then
		state.toolHandleSize = state.killAuraRange
		applyToolHandleSizeToLocalTools(state.toolHandleSize)
	end
end)

-- Tool size controls
autoToolSizeToggle.MouseButton1Click:Connect(function()
	state.autoToolSize = not state.autoToolSize
	setToggle(autoToolSizeToggle, state.autoToolSize)
	if state.autoToolSize then
		-- set tool size to current range immediately
		state.toolHandleSize = safeNumberFromTextBox(rangeBox, state.toolHandleSize)
		applyToolHandleSizeToLocalTools(state.toolHandleSize)
	end
end)

toolSizeBox.FocusLost:Connect(function()
	local v = safeNumberFromTextBox(toolSizeBox, state.toolHandleSize)
	state.toolHandleSize = v
	if not state.autoToolSize then
		applyToolHandleSizeToLocalTools(v)
	end
end)

-- HRP adjust toggles
loopHrpAdjustToggle.MouseButton1Click:Connect(function()
	state.loopHrpAdjust = not state.loopHrpAdjust
	setToggle(loopHrpAdjustToggle, state.loopHrpAdjust)
	if state.loopHrpAdjust and not hrpAdjustRunning then
		state.hrpSizeValue = safeNumberFromTextBox(hrpSizeBox, state.hrpSizeValue)
		state.hrpSelectedOnly = hrpSelectedAdjustToggle.BackgroundColor3 == Color3.fromRGB(120,200,120)
		task.spawn(hrpAdjustLoop)
	end
end)

hrpSizeBox.FocusLost:Connect(function()
	state.hrpSizeValue = safeNumberFromTextBox(hrpSizeBox, state.hrpSizeValue)
end)

hrpSelectedAdjustToggle.MouseButton1Click:Connect(function()
	state.hrpSelectedOnly = not state.hrpSelectedOnly
	setToggle(hrpSelectedAdjustToggle, state.hrpSelectedOnly)
end)

-- Adjust selected players HRP toggle (one-shot)
autoKillSelectedToggle.MouseButton1Click:Connect(function()
	state.autoKillSelected = not state.autoKillSelected
	setToggle(autoKillSelectedToggle, state.autoKillSelected)
	-- This toggle also influences the kill-aura's "selected only" behavior when enabled
end)

-- Extra button: apply HRP size once for selected players
local applySelectedHrpBtn = Instance.new("TextButton")
applySelectedHrpBtn.Size = UDim2.new(1, -20, 0, 36)
applySelectedHrpBtn.Position = UDim2.new(0, 10, 0, 416)
applySelectedHrpBtn.Text = "Apply HRP size to Selected Players"
applySelectedHrpBtn.BackgroundColor3 = Color3.fromRGB(200,200,200)
applySelectedHrpBtn.Parent = mainFrame

applySelectedHrpBtn.MouseButton1Click:Connect(function()
	state.hrpSizeValue = safeNumberFromTextBox(hrpSizeBox, state.hrpSizeValue)
	adjustSelectedPlayersHRPOnce()
end)

-- Make sure nothing accidentally modifies the local player (defensive checks are in place by checking pl ~= player)

-- End of script

-- Hide/Show toggle button (remains visible when main GUI is hidden)
local hideToggle = Instance.new("TextButton")
hideToggle.Name = "HideToggle"
hideToggle.Size = UDim2.new(0, 140, 0, 36)
-- Position the toggle near the left edge of this panel so it's always reachable; adjust as needed
hideToggle.Position = UDim2.new(1, -540, 0.5, -300)
hideToggle.AnchorPoint = Vector2.new(0, 0)
hideToggle.Text = "Hide/Show KillAura"
hideToggle.BackgroundColor3 = Color3.fromRGB(170, 170, 170)
hideToggle.Parent = screenGui

hideToggle.MouseButton1Click:Connect(function()
	-- Toggle only the mainFrame visibility; do not hide the toggle itself
	mainFrame.Visible = not mainFrame.Visible
end)

print("KillAura GUI loaded (separate script). Place this LocalScript in StarterPlayerScripts or StarterGui.")
