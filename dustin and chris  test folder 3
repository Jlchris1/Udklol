local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
ScreenGui.Name = "HitboxGUI"

-- Create function to simplify UI creation
local function createUIElement(class, properties)
    local element = Instance.new(class)
    for property, value in pairs(properties) do
        element[property] = value
    end
    element.Parent = ScreenGui
    return element
end

-- TextBox for size input
local TextBox = createUIElement("TextBox", {
    Size = UDim2.new(0, 150, 0, 30),
    Position = UDim2.new(1, -160, 0.1, 0),
    PlaceholderText = "Enter Size",
    TextScaled = true,
    TextColor3 = Color3.fromRGB(255, 255, 255),
    BackgroundColor3 = Color3.fromRGB(50, 50, 50)
})

-- Define buttons and their positions
local buttons = {
    HitboxNonFriends = {pos = 0.2, text = "Hitbox Non-Friends"},
    HitboxAll = {pos = 0.3, text = "Hitbox All"},
    LoopHitboxNonFriends = {pos = 0.4, text = "Loop Hitbox Non-Friends [OFF]"},
    LoopHitboxAll = {pos = 0.5, text = "Loop Hitbox All [OFF]"},
    HitboxNPCs = {pos = 0.2, text = "Hitbox NPCs", left = true},
    LoopHitboxNPCs = {pos = 0.3, text = "Loop Hitbox NPCs [OFF]", left = true}
}

local UIButtons = {}
for name, data in pairs(buttons) do
    UIButtons[name] = createUIElement("TextButton", {
        Size = UDim2.new(0, 150, 0, 30),
        Position = UDim2.new(data.left and 0 or 1, data.left and 10 or -160, data.pos, 0),
        Text = data.text,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    })
end

-- Toggle UI visibility button (except itself)
local ToggleUI = createUIElement("TextButton", {
    Size = UDim2.new(0, 20, 0, 20),
    Position = UDim2.new(0, 5, 0, 5),
    Text = "âš™",
    TextColor3 = Color3.fromRGB(255, 255, 255),
    BackgroundColor3 = Color3.fromRGB(100, 100, 100)
})

local UIVisible = true
ToggleUI.MouseButton1Click:Connect(function()
    UIVisible = not UIVisible
    for _, element in pairs(ScreenGui:GetChildren()) do
        if element ~= ToggleUI then
            element.Visible = UIVisible
        end
    end
end)

-- Function to adjust HumanoidRootPart size and disable collisions
local function adjustHPRSize(target, size)
    local humanoidRootPart = target:FindFirstChild("HumanoidRootPart", true)
    if humanoidRootPart then
        humanoidRootPart.Size = Vector3.new(size, size, size)
        humanoidRootPart.CanCollide = false -- Prevent flinging
    end
end

-- Function to apply an outline
local function applyAuraOutline(target)
    local humanoidRootPart = target:FindFirstChild("HumanoidRootPart", true)
    if humanoidRootPart and not humanoidRootPart:FindFirstChildOfClass("SelectionBox") then
        local outline = Instance.new("SelectionBox")
        outline.Adornee = humanoidRootPart
        outline.Parent = humanoidRootPart
        outline.LineThickness = 0.05
        outline.Color3 = Color3.fromRGB(255, 0, 0)
        outline.Transparency = 0.5
        outline.ZIndex = 10
    end
end

-- Function to find all NPCs (anything with a HumanoidRootPart excluding players)
local function findAllNPCs()
    local npcs = {}
    for _, descendant in pairs(workspace:GetDescendants()) do
        if descendant:IsA("Model") and descendant:FindFirstChild("HumanoidRootPart", true) then
            local isPlayer = false
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character and player.Character:IsDescendantOf(descendant) then
                    isPlayer = true
                    break
                end
            end
            if not isPlayer then
                table.insert(npcs, descendant)
            end
        end
    end
    return npcs
end

-- Function to apply hitbox changes to NPCs
local function applyHitboxToNPCs()
    local size = tonumber(TextBox.Text) or 50
    for _, npc in pairs(findAllNPCs()) do
        adjustHPRSize(npc, size)
        applyAuraOutline(npc)
    end
end

-- Function to apply hitbox changes to players
local function applyHitboxToPlayers(filter)
    local size = tonumber(TextBox.Text) or 50
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and (filter == "all" or (filter == "nonfriends" and not LocalPlayer:IsFriendsWith(player.UserId))) then
            adjustHPRSize(player.Character, size)
            applyAuraOutline(player.Character)
        end
    end
end

-- Function to toggle loops ON/OFF
local function toggleLoop(button, filter)
    local isRunning = false
    button.MouseButton1Click:Connect(function()
        isRunning = not isRunning
        button.Text = (isRunning and filter:upper() .. " [ON]" or filter:upper() .. " [OFF]")
        while isRunning do
            if filter == "all" or filter == "nonfriends" then
                applyHitboxToPlayers(filter)
            elseif filter == "npcs" then
                applyHitboxToNPCs()
            end
            wait(1)
        end
    end)
end

-- Button Click Actions
UIButtons.HitboxNonFriends.MouseButton1Click:Connect(function() applyHitboxToPlayers("nonfriends") end)
UIButtons.HitboxAll.MouseButton1Click:Connect(function() applyHitboxToPlayers("all") end)
UIButtons.HitboxNPCs.MouseButton1Click:Connect(function() applyHitboxToNPCs() end)

-- Toggle loops
toggleLoop(UIButtons.LoopHitboxNonFriends, "nonfriends")
toggleLoop(UIButtons.LoopHitboxAll, "all")
toggleLoop(UIButtons.LoopHitboxNPCs, "npcs")

-- Auto-adjust hitbox on new players joining
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        applyHitboxToPlayers("all")
    end)
end)

-- Auto-adjust hitbox for NPCs if new ones are added
workspace.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("Model") and descendant:FindFirstChild("HumanoidRootPart", true) then
        applyHitboxToNPCs()
    end
end)
