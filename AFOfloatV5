-- Full LocalScript: Floating + reliable local respawn-at-last-death toggle
-- Place this LocalScript in StarterPlayerScripts

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

local lastPosition = nil           -- last death position
local spawnPart = nil              -- our local SpawnLocation (if created)
local previousRespawnLocation = nil -- saved Player.RespawnLocation to restore later
local humanoidDiedConn = nil

-- GUI Setup (smaller buttons, speed box left of Up/Down, buttons placed higher)
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FloatGui"
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true

local function makeButton(name, posY, text)
    local btn = Instance.new("TextButton")
    btn.Name = name
    btn.Size = UDim2.new(0, 60, 0, 26) -- smaller
    btn.Position = UDim2.new(1, -70, 0, posY) -- right side
    btn.AnchorPoint = Vector2.new(0, 0)
    btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Text = text
    btn.Font = Enum.Font.SourceSansBold
    btn.TextSize = 16
    btn.Parent = screenGui
    return btn
end

local btnUp = makeButton("Up", 20, "Up")
local btnDown = makeButton("Down", 60, "Down")
local btnDisable = makeButton("Disable", 100, "Disable")
local btnSpawnToggle = makeButton("SpawnToggle", 140, "Spawn: OFF")

local speedBox = Instance.new("TextBox")
speedBox.Size = UDim2.new(0, 60, 0, 26)
speedBox.Position = UDim2.new(1, -140, 0, 20) -- left of Up button
speedBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
speedBox.TextColor3 = Color3.new(1, 1, 1)
speedBox.PlaceholderText = "Float Spd"
speedBox.Text = "5"
speedBox.ClearTextOnFocus = false
speedBox.Font = Enum.Font.SourceSansBold
speedBox.TextSize = 14
speedBox.Parent = screenGui

local tpSpeedBox = Instance.new("TextBox")
tpSpeedBox.Size = UDim2.new(0, 60, 0, 26)
tpSpeedBox.Position = UDim2.new(1, -140, 0, 60) -- left of Down button
tpSpeedBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
tpSpeedBox.TextColor3 = Color3.new(1, 1, 1)
tpSpeedBox.PlaceholderText = "TP Spd"
tpSpeedBox.Text = "0.23"
tpSpeedBox.ClearTextOnFocus = false
tpSpeedBox.Font = Enum.Font.SourceSansBold
tpSpeedBox.TextSize = 14
tpSpeedBox.Parent = screenGui

-- Variables for movement/float
local floating = false
local upHeld = false
local downHeld = false
local targetY = 0
local spawnToggle = false

local floatSpeed = tonumber(speedBox.Text) or 5
local tpwalkSpeed = tonumber(tpSpeedBox.Text) or 0.23

local moveSpeed = 20
local airAccel = 12

local idleAnimId = "rbxassetid://180435571"
local idleAnimTrack

local currentVel = Vector3.new(0, 0, 0)
local lastLookVector = Vector3.new(0, 0, -1)

local originalGravity = workspace.Gravity

-- Helpers: create/update/destroy local spawn location
local function createOrUpdateLocalSpawn(pos)
    if not pos then return end
    -- ensure previousRespawnLocation is saved (only the first time we create a local spawn)
    if previousRespawnLocation == nil then
        previousRespawnLocation = player.RespawnLocation
    end

    if not spawnPart or not spawnPart.Parent then
        spawnPart = Instance.new("SpawnLocation")
        spawnPart.Name = ("_LocalSpawn_%d"):format(player.UserId)
        spawnPart.Size = Vector3.new(2, 1, 2)
        spawnPart.Anchored = true
        spawnPart.CanCollide = false
        spawnPart.Transparency = 1
        spawnPart.Locked = true
        spawnPart.Neutral = true
        spawnPart.Parent = workspace
    end

    -- put spawn slightly above ground to avoid being stuck in floor (add 1.5 studs)
    spawnPart.CFrame = CFrame.new(pos) + Vector3.new(0, 1.5, 0)

    -- tell the player to use this spawn for respawn
    pcall(function()
        player.RespawnLocation = spawnPart
    end)
end

local function removeLocalSpawnAndRestore()
    -- restore previous respawn location (could be nil)
    pcall(function()
        player.RespawnLocation = previousRespawnLocation
    end)
    previousRespawnLocation = nil

    if spawnPart and spawnPart.Parent then
        spawnPart:Destroy()
        spawnPart = nil
    end
end

-- Animation handlers
local function playFrozenIdle()
    if idleAnimTrack then
        idleAnimTrack:Stop()
        idleAnimTrack = nil
    end
    if humanoid and humanoid.Parent then
        local anim = Instance.new("Animation")
        anim.AnimationId = idleAnimId
        idleAnimTrack = humanoid:LoadAnimation(anim)
        idleAnimTrack.Looped = true
        idleAnimTrack:Play()
        idleAnimTrack:AdjustSpeed(0)
    end
end

local function stopFrozenIdle()
    if idleAnimTrack then
        idleAnimTrack:Stop()
        idleAnimTrack = nil
    end
end

-- Movement detection
local moving = false
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.W
    or input.KeyCode == Enum.KeyCode.A
    or input.KeyCode == Enum.KeyCode.S
    or input.KeyCode == Enum.KeyCode.D then
        moving = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gp)
    if input.KeyCode == Enum.KeyCode.W
    or input.KeyCode == Enum.KeyCode.A
    or input.KeyCode == Enum.KeyCode.S
    or input.KeyCode == Enum.KeyCode.D then
        local keysDown = UserInputService:IsKeyDown(Enum.KeyCode.W)
            or UserInputService:IsKeyDown(Enum.KeyCode.A)
            or UserInputService:IsKeyDown(Enum.KeyCode.S)
            or UserInputService:IsKeyDown(Enum.KeyCode.D)
        moving = keysDown
    end
end)

RunService.RenderStepped:Connect(function()
    local moveVec = humanoid and humanoid.MoveDirection or Vector3.new()
    if moveVec.Magnitude > 0 then
        moving = true
    elseif not (
        UserInputService:IsKeyDown(Enum.KeyCode.W)
        or UserInputService:IsKeyDown(Enum.KeyCode.A)
        or UserInputService:IsKeyDown(Enum.KeyCode.S)
        or UserInputService:IsKeyDown(Enum.KeyCode.D)
    ) then
        moving = false
    end
end)

-- Velocity reset loop
spawn(function()
    while true do
        if floating and hrp then
            hrp.Velocity = Vector3.new(0, 0, 0)
        end
        wait()
    end
end)

RunService.RenderStepped:Connect(function(dt)
    floatSpeed = tonumber(speedBox.Text) or floatSpeed
    tpwalkSpeed = tonumber(tpSpeedBox.Text) or tpwalkSpeed

    if floating and hrp and humanoid then
        workspace.Gravity = 0

        if targetY == 0 then
            targetY = hrp.Position.Y
        end

        if upHeld then
            targetY = targetY + floatSpeed * dt
        elseif downHeld then
            targetY = targetY - floatSpeed * dt
        end

        local moveDir = humanoid.MoveDirection
        if moveDir.Magnitude > 0 then
            moveDir = moveDir.Unit
        else
            moveDir = Vector3.new()
        end

        local desiredVel = moveDir * moveSpeed
        local currentVelXZ = Vector3.new(currentVel.X, 0, currentVel.Z)
        local desiredVelXZ = Vector3.new(desiredVel.X, 0, desiredVel.Z)
        local t = math.clamp(airAccel * dt, 0, 1)
        currentVelXZ = currentVelXZ:Lerp(desiredVelXZ, t)
        currentVel = Vector3.new(currentVelXZ.X, 0, currentVelXZ.Z)

        hrp.Velocity = Vector3.new(currentVel.X, 0, currentVel.Z)

        local cam = workspace.CurrentCamera
        local camCF = cam.CFrame

        local camLookVector = Vector3.new(camCF.LookVector.X, 0, camCF.LookVector.Z)
        if camLookVector.Magnitude > 0 then
            camLookVector = camLookVector.Unit
        else
            camLookVector = lastLookVector
        end

        lastLookVector = camLookVector
        local newLookVector = lastLookVector

        if moving and moveDir.Magnitude > 0 then
            local currentPos = hrp.Position
            hrp.CFrame = CFrame.new(currentPos + moveDir * tpwalkSpeed, currentPos + newLookVector)
        else
            local pos = hrp.Position
            hrp.CFrame = CFrame.new(pos, pos + newLookVector)
        end

        local pos = hrp.Position
        local newPos = Vector3.new(pos.X, targetY, pos.Z)
        hrp.CFrame = CFrame.new(newPos, newPos + newLookVector)

        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    else
        workspace.Gravity = originalGravity
        targetY = 0

        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end

        if humanoid and humanoid:GetState() == Enum.HumanoidStateType.Physics then
            humanoid:ChangeState(Enum.HumanoidStateType.Running)
        end
    end
end)

-- Setup character (rebind humanoid.Died and teleport on respawn if needed)
local function setupCharacter(char)
    -- disconnect previous died connection
    if humanoidDiedConn then
        humanoidDiedConn:Disconnect()
        humanoidDiedConn = nil
    end

    character = char
    humanoid = char:WaitForChild("Humanoid")
    hrp = char:WaitForChild("HumanoidRootPart")

    -- if we have lastPosition + spawnToggle ON, make sure the newly added character ends up at lastPosition
    if spawnToggle and lastPosition then
        -- small delay to allow the character to fully initialize, then teleport
        spawn(function()
            wait(0.05)
            if char and char.Parent and char:FindFirstChild("HumanoidRootPart") then
                char.HumanoidRootPart.CFrame = CFrame.new(lastPosition) + Vector3.new(0, 1.5, 0)
            end
        end)
    end

    -- rebind died event for this humanoid
    humanoidDiedConn = humanoid.Died:Connect(function()
        if hrp then
            lastPosition = hrp.Position
        end

        -- if spawn toggle is ON, update/create our local spawn immediately so Player.RespawnLocation points to it before respawn occurs
        if spawnToggle and lastPosition then
            createOrUpdateLocalSpawn(lastPosition)
        end
    end)
end

player.CharacterAdded:Connect(setupCharacter)
if character then setupCharacter(character) end

-- Button events (floating)
btnUp.MouseButton1Down:Connect(function()
    floating = true
    upHeld = true
    if hrp then targetY = hrp.Position.Y end
    if humanoid then humanoid:ChangeState(Enum.HumanoidStateType.Physics) end
    playFrozenIdle()
end)
btnUp.MouseButton1Up:Connect(function()
    upHeld = false
end)

btnDown.MouseButton1Down:Connect(function()
    floating = true
    downHeld = true
    if hrp then targetY = hrp.Position.Y end
    if humanoid then humanoid:ChangeState(Enum.HumanoidStateType.Physics) end
    playFrozenIdle()
end)
btnDown.MouseButton1Up:Connect(function()
    downHeld = false
end)

btnDisable.MouseButton1Click:Connect(function()
    floating = false
    stopFrozenIdle()
end)

-- Spawn toggle: when ON -> ensure player respawns at last death; when OFF -> stop and restore world respawn
btnSpawnToggle.MouseButton1Click:Connect(function()
    spawnToggle = not spawnToggle
    if spawnToggle then
        btnSpawnToggle.Text = "Spawn: ON"
        -- create/update local spawn immediately using lastPosition (or current HRP pos if no death yet)
        local desiredPos = lastPosition or (hrp and hrp.Position) or nil
        if desiredPos then
            createOrUpdateLocalSpawn(desiredPos)
        else
            -- fallback to current HRP position a moment later if none available right now
            spawn(function()
                wait(0.05)
                if hrp then
                    createOrUpdateLocalSpawn(hrp.Position)
                end
            end)
        end
    else
        btnSpawnToggle.Text = "Spawn: OFF"
        -- restore player's previous respawn location and remove our local spawn
        removeLocalSpawnAndRestore()
    end
end)

-- Ensure that if the player dies while the toggle is ON we update the spawn (this is extra safety in case humanoid.Died binding missed)
-- (Note: setupCharacter already binds humanoid.Died, but we also handle the current humanoid here)
if humanoid then
    -- already bound in setupCharacter, nothing to do - kept here for clarity
end
