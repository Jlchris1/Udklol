-- Tornado (Friendly / Nightmare) LocalScript â€” FULL SCRIPT (MODIFIED)
-- Added: horizontal vortices (satellite & main), 3-part cap per player, instant follow,
-- satellites use 1/3 of their parts for horizontal vortex, main uses >= 10 parts,
-- horizontal vortex travel time = 5s, radius ~70 studs for satellite horizontal vortices,
-- horizontal vortices are straight-line (with shaky wiggle) and do NOT rotate with tornado.

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local localPlayer = Players.LocalPlayer

-- ========== Configurable Settings ==========
local enabled = false
local tornadoSpinSpeed = 80
local tornadoUpwardSpeed = 50
local tornadoWindfield = 100
local tornadoMoveSpeed = 10
local tornadoInwardPullSpeed = 50

local baseplateName = "Baseplate"

-- Satellite settings (adjustable via GUI)
local maxPartsPerSatellite = 6
local maxSubVortices = 3
local satelliteChaseSpeed = 20 -- studs/sec
local satelliteOrbitRadius = 10
local satelliteRotationSpeed = 3.5
local horizontalVortexAttachRadius = 70 -- changed: satellites horizontal vortex radius
local satelliteMainOrbitAttackCount = 3
local satelliteMainOrbitAttackRate = 1

-- Vertical vortex (wiggly chain) settings (kept)
local verticalChainMinParts = 3
local verticalChainMaxParts = 6
local verticalChainSpeed = 0.7
local verticalChainAmplitude = 4
local verticalChainFrequency = 6
local verticalChainSegmentDelay = 0.12
local verticalAttachDistance = 2.0

-- Horizontal vortex (straight noodle) settings (NEW)
local horizontalVortexDuration = 5.0 -- seconds to reach target
local horizontalVortexMinMainParts = 10 -- main funnel uses at least 10 parts
local horizontalVortexShakyAmplitude = 4.0
local horizontalVortexShakyFrequency = 6.0
local horizontalVortexAttachDistance = 3.0 -- distance at which parts will attach on touch
local horizontalVortexMainCooldown = 8.0 -- how often main can spawn global horizontal vortices
local horizontalVortexSatelliteCooldown = 6.0 -- how often each satellite can spawn its horizontal vortex

-- ========== Runtime State ==========
local tornadoPosition = nil
local pickedUpByFunnel = {}      -- part -> true (picked)
local whitelistedParts = {}      -- part -> true (available pool)
local assignedToSatellite = {}   -- part -> satelliteId or string for special owners
local debrisAttachedToPlayer = {}-- part -> player

local satelliteVortices = {}     -- id -> satellite table
local satelliteAttackState = {}  -- id -> attack state
local nextSatelliteId = 1

local playerAttachmentMap = {}   -- player -> Attachment on HRP
local playerTargetThreads = {}   -- player -> boolean

local nightmareMode = false

local horizontalVortices = {} -- list of active horizontal vortex tables

-- ========== UI ==========
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TornadoBlastGUI"
screenGui.ResetOnSpawn = false
screenGui.DisplayOrder = 100
screenGui.IgnoreGuiInset = true
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")

local hideToggle = Instance.new("TextButton")
hideToggle.Size = UDim2.new(0, 40, 0, 20)
hideToggle.Position = UDim2.new(0, 10, 0.5, -10)
hideToggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
hideToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
hideToggle.Font = Enum.Font.SourceSansBold
hideToggle.TextSize = 14
hideToggle.Text = "Hide"
hideToggle.Parent = screenGui

local inputsVisible = true
local function toggleInputs()
    inputsVisible = not inputsVisible
    for _, child in ipairs(screenGui:GetChildren()) do
        if (child:IsA("TextBox") or child:IsA("TextLabel")) and not (child == hideToggle or child == toggleBtn or child == modeToggle) then
            child.Visible = inputsVisible
        end
    end
end

hideToggle.MouseButton1Click:Connect(function()
    toggleInputs()
    hideToggle.Text = inputsVisible and "Hide" or "Show"
end)

local function createLabeledTextbox(labelText, default, index)
    local perRow = 4
    local row = math.floor(index / perRow)
    local col = index % perRow
    local xOffset = 0.02 + 0.25 * col
    local yOffset = 60 + (row * 60)

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 160, 0, 16)
    label.Position = UDim2.new(xOffset, 0, 0, yOffset)
    label.BackgroundTransparency = 1
    label.Text = labelText
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.Font = Enum.Font.SourceSans
    label.TextSize = 14
    label.ZIndex = 2
    label.Parent = screenGui

    local box = Instance.new("TextBox")
    box.Size = UDim2.new(0, 160, 0, 20)
    box.Position = UDim2.new(xOffset, 0, 0, yOffset + 18)
    box.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
    box.TextColor3 = Color3.fromRGB(0, 0, 0)
    box.Font = Enum.Font.SourceSans
    box.TextSize = 14
    box.Text = tostring(default)
    box.ZIndex = 2
    box.Parent = screenGui

    return box
end

local inputBoxes = {
    {"Spin Speed", tornadoSpinSpeed},
    {"Upward Speed", tornadoUpwardSpeed},
    {"Windfield Radius", tornadoWindfield},
    {"Tornado Movement Speed", tornadoMoveSpeed},
    {"Inward Pull Speed", tornadoInwardPullSpeed},
    {"Max Parts / Satellite", maxPartsPerSatellite},
    {"Max Sub-Vortices", maxSubVortices},
}

local references = {}
for i, data in ipairs(inputBoxes) do
    references[i] = createLabeledTextbox(data[1], data[2], i - 1)
end

local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(0, 24, 0, 24)
toggleBtn.Position = UDim2.new(0.5, -130, 0, 10)
toggleBtn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleBtn.Font = Enum.Font.SourceSansBold
toggleBtn.TextSize = 16
toggleBtn.Text = "O"
toggleBtn.ZIndex = 2
toggleBtn.Parent = screenGui

local modeToggle = Instance.new("TextButton")
modeToggle.Size = UDim2.new(0, 120, 0, 24)
modeToggle.Position = UDim2.new(0.5, -100, 0, 40)
modeToggle.BackgroundColor3 = Color3.fromRGB(70, 30, 30)
modeToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
modeToggle.Font = Enum.Font.SourceSansBold
modeToggle.TextSize = 14
modeToggle.Text = "Mode: Friendly"
modeToggle.Parent = screenGui

modeToggle.MouseButton1Click:Connect(function()
    nightmareMode = not nightmareMode
    modeToggle.Text = nightmareMode and "Mode: Nightmare" or "Mode: Friendly"
end)

-- Bind UI values
references[1].FocusLost:Connect(function() local v = tonumber(references[1].Text); if v then tornadoSpinSpeed = v end end)
references[2].FocusLost:Connect(function() local v = tonumber(references[2].Text); if v then tornadoUpwardSpeed = v end end)
references[3].FocusLost:Connect(function() local v = tonumber(references[3].Text); if v then tornadoWindfield = v end end)
references[4].FocusLost:Connect(function() local v = tonumber(references[4].Text); if v then tornadoMoveSpeed = v end end)
references[5].FocusLost:Connect(function() local v = tonumber(references[5].Text); if v then tornadoInwardPullSpeed = v end end)
references[6].FocusLost:Connect(function()
    local v = tonumber(references[6].Text)
    if v then maxPartsPerSatellite = math.max(1, math.floor(v)) end
end)

local function adjustSatelliteCount(newCount)
    newCount = math.max(0, math.floor(newCount or maxSubVortices))
    maxSubVortices = newCount
    references[7].Text = tostring(maxSubVortices)
    if not enabled or not tornadoPosition then return end

    local current = 0
    for _ in pairs(satelliteVortices) do current = current + 1 end

    if newCount > current then
        local toSpawn = newCount - current
        local orbitRad = math.clamp(tornadoWindfield * 0.3, 8, tornadoWindfield * 0.7)
        local startAngle = math.random() * math.pi * 2
        for i = 1, toSpawn do
            local angle = startAngle + (2 * math.pi * (i - 1) / newCount) + (math.random()*0.2 - 0.1)
            local pos = tornadoPosition + Vector3.new(math.cos(angle) * orbitRad, 10 + math.random()*6, math.sin(angle) * orbitRad)
            spawnSatelliteAt(pos)
        end
    elseif newCount < current then
        local ids = {}
        for id, _ in pairs(satelliteVortices) do table.insert(ids, id) end
        table.sort(ids, function(a,b) return a > b end)
        local toRemove = current - newCount
        for i = 1, toRemove do
            despawnSatellite(ids[i])
        end
    end
end

references[7].FocusLost:Connect(function()
    local v = tonumber(references[7].Text)
    if v then
        adjustSatelliteCount(v)
    end
end)

-- ========== Helper functions ==========
local function isPlayerPart(part)
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Character and part:IsDescendantOf(plr.Character) then
            return true
        end
    end
    return false
end

local function processPartForFunnel(obj)
    if obj:IsA("BasePart") and not obj.Anchored and not isPlayerPart(obj) and obj.Name ~= baseplateName then
        if not whitelistedParts[obj] and not assignedToSatellite[obj] and not debrisAttachedToPlayer[obj] then
            pickedUpByFunnel[obj] = true
            whitelistedParts[obj] = true
        end
    end
end

local function claimPartsForSatellite(n)
    local claimed = {}
    for part in pairs(whitelistedParts) do
        if #claimed >= n then break end
        if part and part.Parent and not part.Anchored and not debrisAttachedToPlayer[part] and not assignedToSatellite[part] then
            table.insert(claimed, part)
            assignedToSatellite[part] = true
            whitelistedParts[part] = nil
            pickedUpByFunnel[part] = nil
        end
    end
    return claimed
end

-- claim from global whitelisted pool (used by main horizontal vortex)
local function claimGlobalParts(n)
    local claimed = {}
    for part in pairs(whitelistedParts) do
        if #claimed >= n then break end
        if part and part.Parent and not part.Anchored and not debrisAttachedToPlayer[part] and not assignedToSatellite[part] then
            table.insert(claimed, part)
            assignedToSatellite[part] = "main_horizontal"
            whitelistedParts[part] = nil
            pickedUpByFunnel[part] = nil
        end
    end
    return claimed
end

local function countAttachedToPlayer(targetPlayer)
    local c = 0
    for part, pl in pairs(debrisAttachedToPlayer) do
        if pl == targetPlayer then c = c + 1 end
    end
    return c
end

-- Attach debris to a player's HRP using AlignPosition
local function getPlayerAttachment(targetPlayer)
    if not targetPlayer or not targetPlayer.Character then return nil end
    if playerAttachmentMap[targetPlayer] and playerAttachmentMap[targetPlayer].Parent then
        return playerAttachmentMap[targetPlayer]
    end
    local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    local att = Instance.new("Attachment")
    att.Name = "Tornado_TargetAttachment"
    att.Parent = hrp
    playerAttachmentMap[targetPlayer] = att
    return att
end

local function attachDebrisToPlayer(debrisPart, targetPlayer)
    if not debrisPart or not debrisPart.Parent or not targetPlayer or not targetPlayer.Character then return false end
    if debrisAttachedToPlayer[debrisPart] then return false end
    if targetPlayer == localPlayer then return false end

    -- enforce 3 parts per player cap
    if countAttachedToPlayer(targetPlayer) >= 3 then
        return false
    end

    local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return false end

    for _, x in next, debrisPart:GetChildren() do
        if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or x:IsA("BodyPosition")
            or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or x:IsA("RocketPropulsion") then
            x:Destroy()
        end
    end

    debrisPart.CanCollide = false

    local attachDeb = Instance.new("Attachment")
    attachDeb.Name = "Tornado_DebrisAttachment"
    attachDeb.Parent = debrisPart

    local align = Instance.new("AlignPosition")
    align.MaxForce = math.huge
    align.MaxVelocity = math.huge
    align.Responsiveness = 10000 -- VERY high for instant-follow behaviour
    align.Attachment0 = attachDeb
    align.Attachment1 = getPlayerAttachment(targetPlayer)
    align.Parent = debrisPart

    local torque = Instance.new("Torque")
    torque.Attachment0 = attachDeb
    torque.Parent = debrisPart

    debrisAttachedToPlayer[debrisPart] = targetPlayer
    assignedToSatellite[debrisPart] = nil
    whitelistedParts[debrisPart] = nil
    pickedUpByFunnel[debrisPart] = nil
    return true
end

local function cleanupDebrisForPlayer(targetPlayer)
    for part, pl in pairs(debrisAttachedToPlayer) do
        if pl == targetPlayer then
            if part and part.Parent then
                for _, child in ipairs(part:GetChildren()) do
                    if child:IsA("AlignPosition") or child:IsA("Attachment") or child:IsA("Torque") then
                        child:Destroy()
                    end
                end
                part.CanCollide = true
            end
            debrisAttachedToPlayer[part] = nil
            assignedToSatellite[part] = nil
            whitelistedParts[part] = nil
            pickedUpByFunnel[part] = nil
        end
    end
    if playerAttachmentMap[targetPlayer] then
        if playerAttachmentMap[targetPlayer].Parent then playerAttachmentMap[targetPlayer]:Destroy() end
        playerAttachmentMap[targetPlayer] = nil
    end
end

-- ========== Tornado physics (friendly/nightmare) ==========
local function applyTornadoFriendly(position, delta)
    -- apply forces every heartbeat for instant responsiveness
    local parts = Workspace:GetPartBoundsInRadius(position, tornadoWindfield)
    for _, obj in ipairs(parts) do
        if obj:IsA("BasePart") and not obj.Anchored and not isPlayerPart(obj) and obj.Name ~= baseplateName then
            processPartForFunnel(obj)
            if whitelistedParts[obj] and not assignedToSatellite[obj] then
                local offset = obj.Position - position
                local horizontalOffset = Vector3.new(offset.X, 0, offset.Z)
                local distance = horizontalOffset.Magnitude
                local dirToCenter = distance > 0 and horizontalOffset.Unit or Vector3.zero
                local spinDir = Vector3.new(-dirToCenter.Z, 0, dirToCenter.X)

                local inwardPull = (distance > 0) and (-dirToCenter * tornadoInwardPullSpeed) or Vector3.zero
                local upward = Vector3.new(0, tornadoUpwardSpeed, 0)
                local rotational = spinDir * tornadoSpinSpeed

                obj.CanCollide = false
                -- instant velocity update (no smoothing)
                obj.AssemblyLinearVelocity = rotational + inwardPull + upward
            end
        end
    end
end

local function applyTornadoNightmare(position, delta)
    local parts = Workspace:GetPartBoundsInRadius(position, tornadoWindfield)
    for _, obj in ipairs(parts) do
        if obj:IsA("BasePart") and not obj.Anchored and not isPlayerPart(obj) and obj.Name ~= baseplateName then
            processPartForFunnel(obj)
            if whitelistedParts[obj] and not assignedToSatellite[obj] then
                local offset = obj.Position - position
                local horizontalOffset = Vector3.new(offset.X, 0, offset.Z)
                local distance = horizontalOffset.Magnitude
                local dirToCenter = distance > 0 and horizontalOffset.Unit or Vector3.zero
                local spinDir = Vector3.new(-dirToCenter.Z, 0, dirToCenter.X)

                local inwardPull = (distance > 0) and (-dirToCenter * (tornadoInwardPullSpeed * 1.1)) or Vector3.zero
                local upward = Vector3.new(0, tornadoUpwardSpeed * 1.0, 0)
                local rotational = spinDir * (tornadoSpinSpeed * 1.2)

                obj.CanCollide = false
                obj.AssemblyLinearVelocity = rotational + inwardPull + upward
            end
        end
    end
end

-- ========== Horizontal vortex (NEW) ==========
-- Parts travel straight from origin -> target position over horizontalVortexDuration seconds.
-- They are given a shaky perpendicular wiggle; they do not rotate with tornado.
-- On proximity to any player (<= horizontalVortexAttachDistance) they try to attach (respecting 3-per-player cap).
local function spawnHorizontalVortex(ownerId, originPos, targetPlayer, partsList, duration)
    if #partsList == 0 then return end
    local hv = {
        owner = ownerId, -- e.g., "main" or satellite id
        origin = originPos,
        targetPlayer = targetPlayer,
        parts = partsList,
        start = tick(),
        duration = duration or horizontalVortexDuration,
        reached = false,
        targetStartPos = (targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")) and targetPlayer.Character.HumanoidRootPart.Position or nil,
        amp = horizontalVortexShakyAmplitude * (0.6 + math.random()*0.8),
        freq = horizontalVortexShakyFrequency * (0.6 + math.random()*0.8)
    }
    -- mark parts as owned
    for _, p in ipairs(partsList) do
        if p and p.Parent then
            assignedToSatellite[p] = ownerId
            whitelistedParts[p] = nil
            pickedUpByFunnel[p] = nil
            p.CanCollide = false
            -- place them at origin immediately
            p.CFrame = CFrame.new(originPos)
            p.AssemblyLinearVelocity = Vector3.zero
        end
    end
    table.insert(horizontalVortices, hv)
end

local function updateHorizontalVortices(delta)
    for i = #horizontalVortices, 1, -1 do
        local hv = horizontalVortices[i]
        if not hv then table.remove(horizontalVortices, i) ; continue end
        local t = (tick() - hv.start) / (hv.duration or horizontalVortexDuration)
        if t > 1.0 then t = 1.0 end

        -- recompute target position if targetPlayer moves
        local tgtPos = hv.targetStartPos
        if hv.targetPlayer and hv.targetPlayer.Character and hv.targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            tgtPos = hv.targetPlayer.Character.HumanoidRootPart.Position
        end
        hv.targetStartPos = tgtPos

        for idx = #hv.parts, 1, -1 do
            local part = hv.parts[idx]
            if part and part.Parent and not part.Anchored and not debrisAttachedToPlayer[part] then
                local goalPos = hv.origin:Lerp(tgtPos, t)
                -- compute perpendicular wiggle
                local travelDir = (tgtPos - hv.origin)
                local horiz = Vector3.new(travelDir.X, 0, travelDir.Z)
                local perp = (horiz.Magnitude > 0.1) and Vector3.new(-horiz.Z, 0, horiz.X).Unit or Vector3.new(1, 0, 0)
                local wiggle = perp * math.sin((t * hv.freq * math.pi * 2) + idx) * (hv.amp * (1 - t))
                -- slight up/down shimmer
                local yShimmer = math.sin((t + idx) * 3.14) * (hv.amp * 0.3 * (1 - t))
                local finalPos = goalPos + wiggle + Vector3.new(0, yShimmer, 0)
                local vel = (finalPos - part.Position) / math.max(delta, 0.016)
                part.AssemblyLinearVelocity = Vector3.new(vel.X, math.clamp(vel.Y, -200, 200), vel.Z)
                part.CanCollide = false

                -- check proximity to players (attach on touch)
                for _, plr in ipairs(Players:GetPlayers()) do
                    if plr ~= localPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                        local hrp = plr.Character.HumanoidRootPart
                        local d = (part.Position - hrp.Position).Magnitude
                        if d <= horizontalVortexAttachDistance then
                            -- try to attach part to player (respecting 3-per-player cap)
                            local success = attachDebrisToPlayer(part, plr)
                            if success then
                                -- remove part from hv.parts (it is now attached)
                                table.remove(hv.parts, idx)
                                break
                            end
                        end
                    end
                end
            else
                table.remove(hv.parts, idx)
            end
        end

        if t >= 1.0 or #hv.parts == 0 then
            -- return leftover parts to pool (unless attached)
            for _, p in ipairs(hv.parts) do
                if p and p.Parent and not debrisAttachedToPlayer[p] then
                    assignedToSatellite[p] = nil
                    whitelistedParts[p] = true
                    pickedUpByFunnel[p] = true
                    p.CanCollide = true
                end
            end
            table.remove(horizontalVortices, i)
        end
    end
end

-- spawn horizontal vortex from satellite using 1/3 of its parts (min 1)
local function trySpawnSatelliteHorizontal(sat)
    if not sat or not sat.parts then return end
    if (tick() - (sat.lastHorizontalSpawn or 0)) < horizontalVortexSatelliteCooldown then return end
    if not sat.target or not sat.target.Character or not sat.target.Character:FindFirstChild("HumanoidRootPart") then return end

    -- count available parts in sat.parts
    local ownedParts = {}
    for part, _ in pairs(sat.parts) do
        if part and part.Parent and not part.Anchored and not debrisAttachedToPlayer[part] then
            table.insert(ownedParts, part)
        end
    end
    local useCount = math.max(1, math.floor(#ownedParts / 3))
    if useCount <= 0 then return end

    local partsToUse = {}
    for i = 1, useCount do
        local p = table.remove(ownedParts, 1)
        if not p then break end
        partsToUse[#partsToUse+1] = p
        sat.parts[p] = nil -- remove from satellite ownership
        assignedToSatellite[p] = sat.id
    end

    if #partsToUse > 0 then
        sat.lastHorizontalSpawn = tick()
        spawnHorizontalVortex(sat.id, sat.pos, sat.target, partsToUse, horizontalVortexDuration)
    end
end

-- spawn main horizontal vortex that can reach across the entire field using at least 10 parts
local mainLastHorizontal = 0
local function trySpawnMainHorizontal()
    if (tick() - mainLastHorizontal) < horizontalVortexMainCooldown then return end
    if not tornadoPosition then return end

    -- gather parts: prefer global pool
    local needed = horizontalVortexMinMainParts
    local parts = claimGlobalParts(needed)

    -- if not enough, steal 1/3 from satellites
    if #parts < needed then
        for id, sat in pairs(satelliteVortices) do
            local satPartsList = {}
            for part, _ in pairs(sat.parts) do
                if part and part.Parent and not part.Anchored and not debrisAttachedToPlayer[part] then
                    table.insert(satPartsList, part)
                end
            end
            local take = math.floor(#satPartsList / 3)
            for i = 1, take do
                if #parts >= needed then break end
                local p = table.remove(satPartsList, 1)
                if not p then break end
                -- remove from sat.parts
                sat.parts[p] = nil
                assignedToSatellite[p] = "main_horizontal"
                parts[#parts+1] = p
            end
            if #parts >= needed then break end
        end
    end

    if #parts < 1 then return end

    -- choose targets: all non-local players in windfield; spawn multiple vortices aiming at different players
    local targets = {}
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= localPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local d = (plr.Character.HumanoidRootPart.Position - tornadoPosition).Magnitude
            if d <= (tornadoWindfield * 2) then -- main can reach across entire field; allow 2x range
                table.insert(targets, plr)
            end
        end
    end

    if #targets == 0 then return end

    mainLastHorizontal = tick()

    -- distribute parts among targets; cap attachments per player will still be enforced when attaching
    local perTarget = math.max(1, math.floor(#parts / #targets))
    local idx = 1
    for _, tgt in ipairs(targets) do
        local sub = {}
        for i = 1, perTarget do
            if parts[idx] then
                table.insert(sub, parts[idx])
                idx = idx + 1
            end
        end
        if #sub > 0 then
            spawnHorizontalVortex("main", tornadoPosition, tgt, sub, horizontalVortexDuration)
        end
    end
    -- leftover parts: return to pool
    for i = idx, #parts do
        local p = parts[i]
        if p and p.Parent and not debrisAttachedToPlayer[p] then
            assignedToSatellite[p] = nil
            whitelistedParts[p] = true
            pickedUpByFunnel[p] = true
        end
    end
end

-- ========== Tornado loop replaced by heartbeat for instant updates ==========
-- We will update tornadoPosition every Heartbeat from HRP for instant-follow behaviour.
-- Also update physics and horizontal vortices every Heartbeat.

local function findNearestOtherPlayer(pos)
    local best, bestDist = nil, math.huge
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= localPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local d = (plr.Character.HumanoidRootPart.Position - pos).Magnitude
            if d < bestDist then
                bestDist = d
                best = plr
            end
        end
    end
    return best, bestDist
end

-- ========== Satellite creation / lifecycle ==========
local function spawnSatelliteAt(pos, idOverride)
    local id = idOverride or nextSatelliteId
    if not idOverride then nextSatelliteId = nextSatelliteId + 1 end

    local parts = claimPartsForSatellite(maxPartsPerSatellite)
    local partsMap = {}
    for i, p in ipairs(parts) do
        if p and p.Parent then
            partsMap[p] = {
                radius = satelliteOrbitRadius + math.random(-3, 6),
                speed = satelliteRotationSpeed + math.random() * 1.5,
                phase = math.random() * math.pi * 2
            }
            assignedToSatellite[p] = id
        end
    end

    satelliteVortices[id] = {
        id = id,
        pos = pos,
        angleOffset = math.random() * math.pi * 2,
        parts = partsMap,
        target = nil,
        verticalChains = {},
        lastVortexSpawnTick = tick(),
        lastHorizontalSpawn = 0
    }
    satelliteAttackState[id] = {attackingPlayers = {}, attackThreads = {}}
    return id
end

function despawnSatellite(id)
    local sat = satelliteVortices[id]
    if not sat then return end
    for part, _ in pairs(sat.parts) do
        if part and part.Parent then
            assignedToSatellite[part] = nil
            whitelistedParts[part] = true
            pickedUpByFunnel[part] = true
            for _, c in ipairs(part:GetChildren()) do
                if c:IsA("AlignPosition") or c:IsA("Attachment") or c:IsA("Torque") then c:Destroy() end
            end
            part.CanCollide = true
        end
    end
    satelliteVortices[id] = nil
    satelliteAttackState[id] = nil
end

-- vertical chain builder (kept mostly intact)
local function spawnVerticalChain(sat, targetPlayer)
    if not sat or not targetPlayer or not targetPlayer.Character then return end
    local needed = math.random(verticalChainMinParts, verticalChainMaxParts)
    local chainParts = {}

    -- prefer satellite-owned parts first
    for part, _ in pairs(sat.parts) do
        if #chainParts >= needed then break end
        if part and part.Parent and not debrisAttachedToPlayer[part] and not part.Anchored then
            table.insert(chainParts, part)
            assignedToSatellite[part] = sat.id
            sat.parts[part] = sat.parts[part] or {
                radius = satelliteOrbitRadius + math.random(-3, 6),
                speed = satelliteRotationSpeed + math.random() * 1.5,
                phase = math.random() * math.pi * 2
            }
        end
    end

    -- fill from global pool if needed
    for part in pairs(whitelistedParts) do
        if #chainParts >= needed then break end
        if part and part.Parent and not debrisAttachedToPlayer[part] and not part.Anchored then
            table.insert(chainParts, part)
            assignedToSatellite[part] = sat.id
            whitelistedParts[part] = nil
            pickedUpByFunnel[part] = nil
            sat.parts[part] = {
                radius = satelliteOrbitRadius + math.random(-3, 6),
                speed = satelliteRotationSpeed + math.random() * 1.5,
                phase = math.random() * math.pi * 2
            }
        end
    end

    if #chainParts == 0 then return end

    local chain = {
        parts = chainParts,
        target = targetPlayer,
        progress = 0,
        speed = verticalChainSpeed * (0.8 + math.random()*0.8),
        amplitude = verticalChainAmplitude * (0.6 + math.random()*0.8),
        frequency = verticalChainFrequency * (0.8 + math.random()*0.8),
        segmentDelay = verticalChainSegmentDelay,
        ownerSatellite = sat.id,
        created = tick()
    }

    table.insert(sat.verticalChains, chain)
end

-- update satellites each heartbeat
local function updateSatellites(delta)
    if not tornadoPosition then return end
    for id, sat in pairs(satelliteVortices) do
        -- update target to nearest player inside windfield
        local best, bestDist = nil, math.huge
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= localPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local d = (plr.Character.HumanoidRootPart.Position - tornadoPosition).Magnitude
                if d <= tornadoWindfield and d < bestDist then
                    bestDist = d
                    best = plr
                end
            end
        end
        sat.target = best

        -- movement (chase target or orbit)
        local pos = sat.pos
        if sat.target and sat.target.Character and sat.target.Character:FindFirstChild("HumanoidRootPart") then
            local tgtPos = sat.target.Character.HumanoidRootPart.Position + Vector3.new(0, 8, 0)
            local dir = (tgtPos - pos)
            if dir.Magnitude > 0.2 then
                local move = dir.Unit * math.min(dir.Magnitude, satelliteChaseSpeed * delta)
                sat.pos = pos + Vector3.new(move.X, move.Y, move.Z)
            end
        else
            sat.angleOffset = sat.angleOffset + (0.5 * delta)
            local orbitRad = math.clamp(tornadoWindfield * 0.25, 6, tornadoWindfield * 0.7)
            local newPos = tornadoPosition + Vector3.new(math.cos(sat.angleOffset) * orbitRad, 10, math.sin(sat.angleOffset) * orbitRad)
            local dir = (newPos - pos)
            sat.pos = pos + dir * math.min(1, delta * 1.5)
        end

        -- update parts for sideways orbit (kept)
        for part, meta in pairs(sat.parts) do
            if part and part.Parent then
                local center = sat.pos
                local angle = (tick() * (meta.speed)) + meta.phase
                local targetPos = center + Vector3.new(math.cos(angle) * meta.radius, 0, math.sin(angle) * meta.radius) + Vector3.new(0, 8 + math.sin(tick()+meta.phase)*3, 0)
                if not part.Anchored then
                    local vel = (targetPos - part.Position) / math.max(delta, 0.016)
                    part.AssemblyLinearVelocity = Vector3.new(vel.X, math.clamp(vel.Y, -120, 120), vel.Z)
                    part.CanCollide = false
                end
                -- satellite horizontal vortex spawn attempt
                if nightmareMode then
                    trySpawnSatelliteHorizontal(sat)
                end
            else
                sat.parts[part] = nil
            end
        end

        -- occasionally spawn vertical chains toward the target (kept)
        if sat.target and (tick() - sat.lastVortexSpawnTick) >= (1.5 + math.random()*2.0) then
            sat.lastVortexSpawnTick = tick()
            spawnVerticalChain(sat, sat.target)
        end

        -- update vertical chains (kept with minor safety)
        for ci = #sat.verticalChains, 1, -1 do
            local chain = sat.verticalChains[ci]
            if not chain or not chain.target or not chain.target.Character then
                table.remove(sat.verticalChains, ci)
            else
                chain.progress = math.min(1.5, chain.progress + chain.speed * delta)
                local targetHRP = chain.target.Character:FindFirstChild("HumanoidRootPart")
                if targetHRP then
                    for idx, part in ipairs(chain.parts) do
                        if part and part.Parent and not part.Anchored then
                            local segT = math.clamp(chain.progress - ((idx - 1) * chain.segmentDelay), 0, 1)
                            local basePos = sat.pos
                            local goalPos = basePos:Lerp(targetHRP.Position + Vector3.new(0, 6, 0), segT)
                            local toTarget = (targetHRP.Position - basePos)
                            local horiz = Vector3.new(toTarget.X, 0, toTarget.Z)
                            local perp = (horiz.Magnitude > 0.1) and Vector3.new(-horiz.Z, 0, horiz.X).Unit or Vector3.new(1,0,0)
                            local wiggle = perp * math.sin((segT * chain.frequency) + idx) * (chain.amplitude * (1 - segT))
                            local finalPos = goalPos + wiggle + Vector3.new(0, segT * 6, 0)
                            local vel = (finalPos - part.Position) / math.max(delta, 0.016)
                            part.AssemblyLinearVelocity = Vector3.new(vel.X, math.clamp(vel.Y, -140, 140), vel.Z)
                            part.CanCollide = false

                            local distToHRP = (part.Position - targetHRP.Position).Magnitude
                            if distToHRP <= verticalAttachDistance then
                                attachDebrisToPlayer(part, chain.target)
                                chain.parts[idx] = nil
                            end
                        else
                            chain.parts[idx] = nil
                        end
                    end

                    -- compress parts
                    local newParts = {}
                    for _, p in ipairs(chain.parts) do if p then table.insert(newParts, p) end end
                    chain.parts = newParts

                    if #chain.parts == 0 or chain.progress >= 1.4 then
                        table.remove(sat.verticalChains, ci)
                    end
                else
                    table.remove(sat.verticalChains, ci)
                end
            end
        end

        -- main orbit attack (fire up to 3 parts every 1 second) (kept)
        local meanRadius = 0
        local countR = 0
        for _, m in pairs(sat.parts) do meanRadius = meanRadius + (m.radius or satelliteOrbitRadius); countR = countR + 1 end
        if countR > 0 then meanRadius = meanRadius / countR else meanRadius = satelliteOrbitRadius end

        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= localPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = plr.Character.HumanoidRootPart
                local dToSat = (hrp.Position - sat.pos).Magnitude
                local inOrbit = dToSat <= (meanRadius + 3)
                local state = satelliteAttackState[id]
                if inOrbit then
                    state.attackingPlayers[plr] = state.attackingPlayers[plr] or true
                    if not state.attackThreads[plr] then
                        state.attackThreads[plr] = true
                        spawn(function()
                            while state.attackingPlayers[plr] do
                                if not plr or not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then break end
                                local curDist = (plr.Character.HumanoidRootPart.Position - sat.pos).Magnitude
                                if curDist > (meanRadius + 6) then break end
                                local fired = 0
                                for part, _ in pairs(sat.parts) do
                                    if fired >= satelliteMainOrbitAttackCount then break end
                                    if part and part.Parent and not debrisAttachedToPlayer[part] and not part.Anchored then
                                        -- only attach up to 3 parts per player (attachDebrisToPlayer enforces cap)
                                        if attachDebrisToPlayer(part, plr) then
                                            fired = fired + 1
                                        end
                                    end
                                end
                                if fired == 0 then
                                    local extras = claimPartsForSatellite(satelliteMainOrbitAttackCount)
                                    for _, p in ipairs(extras) do
                                        if p and p.Parent then
                                            sat.parts[p] = {
                                                radius = satelliteOrbitRadius + math.random(-3, 6),
                                                speed = satelliteRotationSpeed + math.random() * 1.5,
                                                phase = math.random() * math.pi * 2
                                            }
                                            assignedToSatellite[p] = id
                                        end
                                    end
                                end

                                local waited = 0
                                while waited < satelliteMainOrbitAttackRate do
                                    if not state.attackingPlayers[plr] then break end
                                    task.wait(0.1)
                                    waited = waited + 0.1
                                end
                            end
                            state.attackThreads[plr] = nil
                            state.attackingPlayers[plr] = nil
                        end)
                    end
                else
                    if state then
                        state.attackingPlayers[plr] = nil
                        state.attackThreads[plr] = nil
                    end
                end
            end
        end

        -- cleanup: if satellite lost all parts, despawn
        local partCount = 0
        for p, _ in pairs(sat.parts) do
            if p and p.Parent then partCount = partCount + 1 end
        end
        if partCount == 0 then despawnSatellite(id) end
    end
end

-- ========== Satellite formation helpers ==========
local function formSatellitesInstant()
    for id, _ in pairs(satelliteVortices) do despawnSatellite(id) end

    local count = math.max(0, maxSubVortices)
    if count == 0 then return end
    if not tornadoPosition then
        local waited = 0
        while not tornadoPosition and waited < 1.0 do
            task.wait(0.05)
            waited = waited + 0.05
            local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
            if root then tornadoPosition = root.Position break end
        end
        if not tornadoPosition then return end
    end

    local orbitRad = math.clamp(tornadoWindfield * 0.3, 8, tornadoWindfield * 0.7)
    for i = 1, count do
        local angle = (2 * math.pi * (i - 1) / count) + (math.random() * 0.2 - 0.1)
        local pos = tornadoPosition + Vector3.new(math.cos(angle) * orbitRad, 10 + math.random()*6, math.sin(angle) * orbitRad)
        spawnSatelliteAt(pos)
    end
end

-- ========== Workspace scanning & DescendantAdded ==========
Workspace.DescendantAdded:Connect(function(desc)
    if desc and desc:IsA("BasePart") then
        task.defer(function()
            if enabled and tornadoPosition and (desc.Position - tornadoPosition).Magnitude <= tornadoWindfield then
                if not desc.Anchored then processPartForFunnel(desc) end
            end
        end)
    end
end)

-- periodic scan to keep funnel stocked
spawn(function()
    while true do
        if enabled and tornadoPosition then
            local parts = Workspace:GetPartBoundsInRadius(tornadoPosition, tornadoWindfield)
            for _, p in ipairs(parts) do
                if p and p:IsA("BasePart") and not p.Anchored then processPartForFunnel(p) end
            end
        end
        task.wait(1)
    end
end)

-- ========== Heartbeat & loops ==========
RunService.Heartbeat:Connect(function(delta)
    if enabled then
        -- update tornado position instantly from local player's HRP for instant-follow behaviour
        local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
        if root then
            tornadoPosition = root.Position
        end

        -- apply tornado physics each heartbeat for instant responsiveness
        if tornadoPosition then
            if nightmareMode then
                applyTornadoNightmare(tornadoPosition, delta)
            else
                applyTornadoFriendly(tornadoPosition, delta)
            end
        end

        -- satellites
        updateSatellites(delta)

        -- horizontal vortices updates
        updateHorizontalVortices(delta)

        -- main horizontal vortex spawner (periodic)
        if nightmareMode then
            trySpawnMainHorizontal()
        end
    end
end)

-- Player firing logic - kept but reworked to respect immediate tornadoPosition and 3-part cap
local function startFiringAtPlayer(targetPlayer)
    if playerTargetThreads[targetPlayer] then return end
    playerTargetThreads[targetPlayer] = true
    spawn(function()
        while playerTargetThreads[targetPlayer] and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") do
            local hrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
            if not hrp or not tornadoPosition then break end
            local dist = (hrp.Position - tornadoPosition).Magnitude
            if dist > tornadoWindfield then break end

            local candidate = nil
            for part in pairs(whitelistedParts) do
                if part and part.Parent and not debrisAttachedToPlayer[part] and not assignedToSatellite[part] then
                    candidate = part
                    break
                end
            end

            if candidate then attachDebrisToPlayer(candidate, targetPlayer) end

            local waitFor = 3
            for i=1, waitFor*10 do
                if not playerTargetThreads[targetPlayer] then break end
                task.wait(0.1)
            end
        end
        cleanupDebrisForPlayer(targetPlayer)
        playerTargetThreads[targetPlayer] = nil
    end)
end

local function stopFiringAtPlayer(targetPlayer)
    playerTargetThreads[targetPlayer] = nil
    cleanupDebrisForPlayer(targetPlayer)
end

-- windfield watcher monitors players inside/outside tornadoWindfield
local function windfieldWatcher()
    while true do
        if tornadoPosition then
            for _, plr in ipairs(Players:GetPlayers()) do
                if plr ~= localPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                    local hrp = plr.Character.HumanoidRootPart
                    local dist = (hrp.Position - tornadoPosition).Magnitude
                    if dist <= tornadoWindfield then
                        if not playerTargetThreads[plr] then startFiringAtPlayer(plr) end
                    else
                        if playerTargetThreads[plr] then stopFiringAtPlayer(plr) end
                    end
                end
            end
        end
        task.wait(1)
    end
end

-- ========== Nightmare launcher fling logic (kept) ==========
local function nightmareLauncherLoop()
    while true do
        if enabled and nightmareMode and tornadoPosition then
            local pool = {}
            for part in pairs(whitelistedParts) do
                if part and part.Parent and not debrisAttachedToPlayer[part] and not assignedToSatellite[part] and not part.Anchored then
                    table.insert(pool, part)
                end
            end
            if #pool > 0 then
                local part = pool[math.random(1, #pool)]
                local targetPlr, d = findNearestOtherPlayer(part.Position)
                if targetPlr and targetPlr.Character and targetPlr.Character:FindFirstChild("HumanoidRootPart") then
                    local dir = (targetPlr.Character.HumanoidRootPart.Position - part.Position)
                    local unit = dir.Unit
                    local launchSpeed = 300 + math.random(0,200)
                    if not part.Anchored then
                        part.AssemblyLinearVelocity = unit * launchSpeed + Vector3.new(0, 50, 0)
                    end
                end
            end
        end
        task.wait(4 + math.random())
    end
end

spawn(windfieldWatcher)
spawn(nightmareLauncherLoop)

-- ========== Robust respawn handling ==========
local function onCharacterAdded(character)
    task.wait(0.1)
    local root = character:WaitForChild("HumanoidRootPart", 2)
    if root then
        tornadoPosition = root.Position
    end

    if enabled and tornadoPosition then
        local parts = Workspace:GetPartBoundsInRadius(tornadoPosition, tornadoWindfield)
        for _, p in ipairs(parts) do
            if p and p:IsA("BasePart") and not p.Anchored then
                processPartForFunnel(p)
            end
        end
        formSatellitesInstant()
    end
end

if localPlayer.Character then
    onCharacterAdded(localPlayer.Character)
end
localPlayer.CharacterAdded:Connect(onCharacterAdded)

-- ========== Toggle button logic ==========
toggleBtn.MouseButton1Click:Connect(function()
    enabled = not enabled
    toggleBtn.Text = enabled and "X" or "O"
    if enabled then
        -- reset runtime pools to clean state
        pickedUpByFunnel = {}
        whitelistedParts = {}
        assignedToSatellite = {}
        satelliteVortices = {}
        satelliteAttackState = {}
        nextSatelliteId = 1
        debrisAttachedToPlayer = {}
        horizontalVortices = {}

        -- immediate scan & form satellites
        task.wait(0.05)
        if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
            tornadoPosition = localPlayer.Character.HumanoidRootPart.Position
        end

        if tornadoPosition then
            local parts = Workspace:GetPartBoundsInRadius(tornadoPosition, tornadoWindfield)
            for _, p in ipairs(parts) do
                if p and p:IsA("BasePart") and not p.Anchored then processPartForFunnel(p) end
            end
        end

        formSatellitesInstant()
    else
        -- cleanup everything
        for part in pairs(whitelistedParts) do
            if part and part:IsA("BasePart") and part.Parent then
                part.AssemblyLinearVelocity = Vector3.zero
                part.CanCollide = true
                for _, child in ipairs(part:GetChildren()) do
                    if child:IsA("AlignPosition") or child:IsA("Attachment") or child:IsA("Torque") then child:Destroy() end
                end
            end
        end

        -- cleanup satellites
        for id, _ in pairs(satelliteVortices) do despawnSatellite(id) end

        -- cleanup horizontal vortices (return parts)
        for _, hv in ipairs(horizontalVortices) do
            for _, p in ipairs(hv.parts or {}) do
                if p and p.Parent and not debrisAttachedToPlayer[p] then
                    assignedToSatellite[p] = nil
                    whitelistedParts[p] = true
                    pickedUpByFunnel[p] = true
                    p.CanCollide = true
                end
            end
        end
        horizontalVortices = {}

        -- cleanup player attachments
        for pl, att in pairs(playerAttachmentMap) do
            if att and att.Parent then att:Destroy() end
            playerAttachmentMap[pl] = nil
        end

        -- stop firing threads
        for pl, _ in pairs(playerTargetThreads) do playerTargetThreads[pl] = nil end

        debrisAttachedToPlayer = {}
        whitelistedParts = {}
        pickedUpByFunnel = {}
        assignedToSatellite = {}
        satelliteVortices = {}
        satelliteAttackState = {}
        horizontalVortices = {}
    end
end)

-- End of modified script
