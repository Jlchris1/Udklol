-- Gui to Lua
-- Version: 3.2

-- Instances:

local HyperLoop4 = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local hyperloop = Instance.new("TextButton")

--Properties:

HyperLoop4.Name = "HyperLoop4"
HyperLoop4.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
HyperLoop4.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
HyperLoop4.ResetOnSpawn = false

Frame.Parent = HyperLoop4
Frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.440026969, 0, 0.413237303, 0)
Frame.Size = UDim2.new(0, 196, 0, 84)

hyperloop.Name = "hyperloop"
hyperloop.Parent = Frame
hyperloop.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
hyperloop.BorderColor3 = Color3.fromRGB(0, 0, 0)
hyperloop.BorderSizePixel = 0
hyperloop.Position = UDim2.new(0.10204082, 0, 0.202380955, 0)
hyperloop.Size = UDim2.new(0, 158, 0, 50)
hyperloop.Font = Enum.Font.SourceSansBold
hyperloop.Text = "hyper loop pt 1"
hyperloop.TextColor3 = Color3.fromRGB(0, 0, 0)
hyperloop.TextSize = 20.000

-- Scripts:

local function BJVB_fake_script() -- hyperloop.lelele 
	local script = Instance.new('Script', hyperloop)

	function Click(mouse)
	
		local prefix = '+'
	
		repeat wait() until game:IsLoaded()
	
		local plrs = game:GetService("Players")
		local plr = plrs.LocalPlayer
		local loopAll = false
		local killTargets = {} -- List of UserIds of players targeted by the +kill command
		local whitelistedPlayers = {} -- List of players whitelisted by the +wl command
		local stoppedLoopPlayers = {} -- List of UserIds of players whose loops are stopped
	
		-- Function to apply arm angle changes to a player's character
		local function ApplyArmAngleChanges(player, isPermanent)
			local character = player.Character
			if character then
				local angle = CFrame.new(-9e37, 9e37, 9e37)
	
				local armAngleChange = character:FindFirstChild("ArmAngleChange")
				local headAngleChange = character:FindFirstChild("HeadAngleChange")
	
				if armAngleChange then
					armAngleChange:FireServer(angle)
				end
	
				if headAngleChange then
					headAngleChange:FireServer(angle)
				end
	
				if not isPermanent then
					wait(0.1)
				end
			end
		end
	
		-- Function to loop actions for all players at once (for +lol command)
		local function loopActions()
			while loopAll do
				local ping = plr:GetNetworkPing()
	
				if ping > 2000 then
					wait(1)
				else
					for _, player in ipairs(plrs:GetPlayers()) do
						if player ~= plr and not whitelistedPlayers[player.UserId] and not stoppedLoopPlayers[player.UserId] then
							ApplyArmAngleChanges(player, false)
						end
					end
					wait()
				end
			end
		end
	
		-- Function to loop specific players targeted by +kill
		local function loopKillTargets()
			while true do
				for userId, active in pairs(killTargets) do
					if active then
						local targetPlayer = plrs:GetPlayerByUserId(userId)
						if targetPlayer and targetPlayer.Character and not stoppedLoopPlayers[userId] then
							ApplyArmAngleChanges(targetPlayer, false)
						end
					end
				end
				wait()
			end
		end
	
		-- Start and stop loop for all players (+lol)
		local function startLoopAll()
			if not loopAll then
				loopAll = true
				spawn(loopActions)
			end
		end
	
		local function stopLoopAll()
			loopAll = false
		end
	
		-- +kill target functionality (loop specific players by UserId)
		local function addPlayerToKillTargets(player)
			if player and not stoppedLoopPlayers[player.UserId] then
				killTargets[player.UserId] = true -- Mark player as a kill target
				ApplyArmAngleChanges(player, false) -- Apply immediately
			end
		end
	
		local function removePlayerFromKillTargets(player)
			if player then
				killTargets[player.UserId] = nil -- Remove player from kill targets
				stoppedLoopPlayers[player.UserId] = true -- Mark player as stopped
			end
		end
	
		-- Utility function to find player
		local function findPlayer(Target)
			if plrs:FindFirstChild(Target) then
				return plrs:FindFirstChild(Target)
			else
				if Target and Target ~= "" and Target ~= " " then
					local name = Target
					local found = false
					for _, v in pairs(plrs:GetPlayers()) do
						if not found and (v.Name:lower():sub(1, #name) == name:lower() or v.DisplayName:lower():sub(1, #name) == name:lower()) then
							name = v
							found = true
						end
					end
					if name ~= nil and name ~= Target then
						return name
					end
				end
			end
		end
	
		-- Generalized targeting handler
		local function handleTargetingCommand(args, targetFunction)
			for i = 2, #args do
				local player = findPlayer(args[i])
				if player and player ~= plr and not whitelistedPlayers[player.UserId] then
					targetFunction(player)
				end
			end
		end
	
		-- Command to whitelist players
		local function whitelistPlayer(player)
			if player and not whitelistedPlayers[player.UserId] then
				whitelistedPlayers[player.UserId] = true
			end
		end
	
		-- Command to stop loop for specific players
		local function stopLoopForPlayer(player)
			if player then
				stoppedLoopPlayers[player.UserId] = true -- Mark player as stopped
			end
		end
	
		-- Command handling logic
		plr.Chatted:Connect(function(msg)
			local args = msg:lower():split(" ")
			local command = args[1]
	
			if command == prefix .. "rc" or (args[1] == "/e" and args[2] == "+rc") then
				-- +rc: Stops all loops and prevents new player checks
				stopLoopAll()
			elseif command == prefix .. "lol" or (args[1] == "/e" and args[2] == "+lol") then
				-- +lol: Loops all players in the server who arenâ€™t whitelisted
				startLoopAll()
			elseif command == prefix .. "kill" or (args[1] == "/e" and args[2] == "+kill") then
				-- +kill: Targets specified players for continuous looping until stopped or player leaves
				handleTargetingCommand(args, addPlayerToKillTargets)
			elseif command == prefix .. "unkill" or (args[1] == "/e" and args[2] == "+unkill") then
				-- +unkill: Removes players from kill targets and stops their loop
				handleTargetingCommand(args, removePlayerFromKillTargets)
			elseif command == prefix .. "skill" or (args[1] == "/e" and args[2] == "+skill") then
				-- +skill: Applies a single arm angle change to specific players
				for i = 2, #args do
					local targetPlayer = findPlayer(args[i])
					if targetPlayer and not whitelistedPlayers[targetPlayer.UserId] then
						ApplyArmAngleChanges(targetPlayer, true)
					end
				end
			elseif command == prefix .. "slol" or (args[1] == "/e" and args[2] == "+slol") then
				-- +slol: Applies a single arm angle change to all players in the server except whitelisted
				for _, player in ipairs(plrs:GetPlayers()) do
					if player ~= plr and not whitelistedPlayers[player.UserId] and not stoppedLoopPlayers[player.UserId] then
						ApplyArmAngleChanges(player, true)
					end
				end
			elseif command == prefix .. "wl" or (args[1] == "/e" and args[2] == "+wl") then
				-- +wl: Whitelists specified players from any loop actions
				handleTargetingCommand(args, whitelistPlayer)
			elseif command == prefix .. "stop" or (args[1] == "/e" and args[2] == "+stop") then
				-- +stop: Stops loop actions on specific players
				handleTargetingCommand(args, stopLoopForPlayer)
			end
		end)
	
		-- Detect player rejoining and check if they were in kill targets
		plrs.PlayerAdded:Connect(function(player)
			if killTargets[player.UserId] then
				stoppedLoopPlayers[player.UserId] = false -- Reset the stopped state
				ApplyArmAngleChanges(player, false) -- Apply immediately to the rejoined player
			end
		end)
	
		-- Remove player from kill targets when they leave
		plrs.PlayerRemoving:Connect(function(player)
			stoppedLoopPlayers[player.UserId] = true -- Mark player as stopped
		end)
	
		-- Start loop for specific kill targets
		spawn(loopKillTargets)
	end
	
	
	script.Parent.MouseButton1Down:connect(Click)
end
coroutine.wrap(BJVB_fake_script)()
local function ROSKRS_fake_script() -- Frame.LocalScript 
	local script = Instance.new('LocalScript', Frame)

	local dragger = {}; 
	local resizer = {};
	
	do
		local mouse = game:GetService("Players").LocalPlayer:GetMouse();
		local inputService = game:GetService('UserInputService');
		local heartbeat = game:GetService("RunService").Heartbeat;
		-- // credits to Ririchi / Inori for this cute drag function :)
		function dragger.new(frame)
			local s, event = pcall(function()
				return frame.MouseEnter
			end)
	
			if s then
				frame.Active = true;
	
				event:connect(function()
					local input = frame.InputBegan:connect(function(key)
						if key.UserInputType == Enum.UserInputType.MouseButton1 then
							local objectPosition = Vector2.new(mouse.X - frame.AbsolutePosition.X, mouse.Y - frame.AbsolutePosition.Y);
							while heartbeat:wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
								frame:TweenPosition(UDim2.new(0, mouse.X - objectPosition.X + (frame.Size.X.Offset * frame.AnchorPoint.X), 0, mouse.Y - objectPosition.Y + (frame.Size.Y.Offset * frame.AnchorPoint.Y)), 'Out', 'Quad', 0.1, true);
							end
						end
					end)
	
					local leave;
					leave = frame.MouseLeave:connect(function()
						input:disconnect();
						leave:disconnect();
					end)
				end)
			end
		end
	
		function resizer.new(p, s)
			p:GetPropertyChangedSignal('AbsoluteSize'):connect(function()
				s.Size = UDim2.new(s.Size.X.Scale, s.Size.X.Offset, s.Size.Y.Scale, p.AbsoluteSize.Y);
			end)
		end
	end
	script.Parent.Active = true
	script.Parent.Draggable = true
end
coroutine.wrap(ROSKRS_fake_script)()
