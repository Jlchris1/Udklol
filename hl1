-- Gui to Lua
-- Version: 3.2

-- Instances:

local HyperLoop4 = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local hyperloop = Instance.new("TextButton")

--Properties:

HyperLoop4.Name = "HyperLoop4"
HyperLoop4.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
HyperLoop4.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
HyperLoop4.ResetOnSpawn = false

Frame.Parent = HyperLoop4
Frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.440026969, 0, 0.413237303, 0)
Frame.Size = UDim2.new(0, 196, 0, 84)

hyperloop.Name = "hyperloop"
hyperloop.Parent = Frame
hyperloop.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
hyperloop.BorderColor3 = Color3.fromRGB(0, 0, 0)
hyperloop.BorderSizePixel = 0
hyperloop.Position = UDim2.new(0.10204082, 0, 0.202380955, 0)
hyperloop.Size = UDim2.new(0, 158, 0, 50)
hyperloop.Font = Enum.Font.SourceSansBold
hyperloop.Text = "hyper loop pt 1"
hyperloop.TextColor3 = Color3.fromRGB(0, 0, 0)
hyperloop.TextSize = 20.000

-- Scripts:

local function LCSM_fake_script() -- hyperloop.lelele 
	local script = Instance.new('Script', hyperloop)

	function Click(mouse)
	
		local prefix = '+'
	
		repeat wait() until game:IsLoaded()
	
		local plrs = game:GetService("Players")
		local plr = plrs.LocalPlayer
		local loopAll = false
		local targetPlayers = {} -- List of players currently targeted for looping
		local killTargets = {} -- List of UserIds of players targeted by the +kill command (for anti-rejoin)
		local whitelistedPlayers = {} -- List of players whitelisted by the +wl command
		local UserInputService = game:GetService("UserInputService")
	
		-- Function to apply arm angle changes to a player's character
		local function ApplyArmAngleChanges(player, isPermanent)
			local character = player.Character
			if character then
				-- Use the specific angle of -9e37 for kill actions
				local angle = CFrame.new(-9e37, -9e37, -9e37)
	
				-- Apply the angle change
				local armAngleChange = character:FindFirstChild("ArmAngleChange")
				local headAngleChange = character:FindFirstChild("HeadAngleChange")
	
				if armAngleChange then
					armAngleChange:FireServer(angle) -- Fire the arm angle change
				end
	
				if headAngleChange then
					headAngleChange:FireServer(angle) -- Set head angle
				end
	
				if not isPermanent then
					wait(0.1) -- Wait briefly to create a noticeable effect if not permanent
				end
			end
		end
	
		-- Function to loop actions for all target players
		local function loopActions()
			while loopAll do
				-- Check player ping
				local ping = plr:GetNetworkPing() -- Get the player's network ping
	
				-- Pause the loop if ping is above 2000ms
				if ping > 2000 then
					wait(1) -- Wait for 1 second before checking again
				else
					-- Loop through all targeted players and apply the angle changes
					for _, targetPlayer in ipairs(targetPlayers) do
						if targetPlayer and targetPlayer.Character then
							ApplyArmAngleChanges(targetPlayer, false)
						end
					end
					wait(0.08) -- Wait before the next iteration
				end
			end
		end
	
		local function startLoopAll()
			if not loopAll then
				loopAll = true
				spawn(loopActions) -- Start the loop in a new thread
			end
		end
	
		local function stopLoopAll()
			loopAll = false
			targetPlayers = {} -- Clear the target players when stopping
			killTargets = {} -- Clear kill targets
		end
	
		local function startLoopAllPlayers()
			targetPlayers = {} -- Clear previous targets
			for _, player in ipairs(plrs:GetPlayers()) do
				if player ~= plr and not whitelistedPlayers[player.UserId] then -- Exclude local player and whitelisted players
					table.insert(targetPlayers, player) -- Add all players to target list
				end
			end
			startLoopAll() -- Start applying arm angles to all players
		end
	
		-- Function to handle targeting by UserId
		local function addPlayerToKillTargets(player)
			if player then
				table.insert(killTargets, player.UserId) -- Add the player's UserId to the kill targets list
				table.insert(targetPlayers, player) -- Add the player to the active loop target list
				startLoopAll() -- Ensure the loop is running
			end
		end
	
		-- Function to handle rejoining targets
		local function reapplyKillLoop(player)
			if table.find(killTargets, player.UserId) then
				table.insert(targetPlayers, player) -- Re-add the player to the target list
				startLoopAll() -- Ensure the loop is running
			end
		end
	
		-- Function to find players by partial name or display name
		local function findPlayer(Target)
			if plrs:FindFirstChild(Target) then
				return plrs:FindFirstChild(Target)
			else
				if Target and Target ~= "" and Target ~= " " then
					local name = Target
					local found = false
					for _, v in pairs(plrs:GetPlayers()) do
						if not found and (v.Name:lower():sub(1, #name) == name:lower() or v.DisplayName:lower():sub(1, #name) == name:lower()) then
							name = v
							found = true
						end
					end
					if name ~= nil and name ~= Target then
						return name
					end
				end
			end
		end
	
		-- Function to handle commands that target specific players
		local function handleTargetingCommand(args, targetFunction)
			for i = 2, #args do
				local player = findPlayer(args[i])
				if player and player ~= plr and not whitelistedPlayers[player.UserId] then -- Exclude local player and whitelisted players
					targetFunction(player)
				end
			end
		end
	
		-- Function to whitelist players
		local function whitelistPlayer(player)
			if player and not whitelistedPlayers[player.UserId] then
				whitelistedPlayers[player.UserId] = true -- Add player to whitelist
			end
		end
	
		plr.Chatted:Connect(function(msg)
			local args = msg:lower():split(" ")
			local command = args[1]
	
			if command == prefix .. "rc" or (args[1] == "/e" and args[2] == "+rc") then
				stopLoopAll() -- Completely stop everything related to looping
				killTargets = {} -- Clear kill targets to stop their detection
			elseif command == prefix .. "lol" or (args[1] == "/e" and args[2] == "+lol") then
				-- Start the loop for all players currently in the server except the local player and whitelisted players
				startLoopAllPlayers()
			elseif command == prefix .. "kill" or (args[1] == "/e" and args[2] == "+kill") then
				-- Handle the +kill and /e +kill commands
				handleTargetingCommand(args, addPlayerToKillTargets)
			elseif command == prefix .. "skill" then
				-- Change angles for specific players once
				handleTargetingCommand(args, function(player)
					ApplyArmAngleChanges(player, true)
				end)
			elseif command == prefix .. "slol" or (args[1] == "/e" and args[2] == "+slol") then
				-- Change angles for all players once, excluding local player and whitelisted players
				for _, player in ipairs(plrs:GetPlayers()) do
					if player ~= plr and not whitelistedPlayers[player.UserId] then -- Exclude the local player and whitelisted players
						ApplyArmAngleChanges(player, true) -- Change angles once
					end
				end
			elseif command == prefix .. "wl" or (args[1] == "/e" and args[2] == "+wl") then
				-- Whitelist specific players from +lol, +slol, and +kill
				for i = 2, #args do
					local playerToWhitelist = findPlayer(args[i])
					if playerToWhitelist then
						whitelistPlayer(playerToWhitelist)
					end
				end
			end
		end)
	
		plrs.PlayerRemoving:Connect(function(player)
			-- If the target player leaves, remove from the target players
			targetPlayers = table.filter(targetPlayers, function(p) return p.Name ~= player.Name end)
		end)
	
		plrs.PlayerAdded:Connect(function(player)
			-- For +kill, if the target rejoins, reapply the loop for the same target
			reapplyKillLoop(player)
		end)
	
		-- Helper function to filter out players based on a condition
		function table.filter(tbl, func)
			local filtered = {}
			for _, value in ipairs(tbl) do
				if func(value) then
					table.insert(filtered, value)
				end
			end
			return filtered
		end
	end
	
	
	script.Parent.MouseButton1Down:connect(Click)
end
coroutine.wrap(LCSM_fake_script)()
local function EKGC_fake_script() -- Frame.LocalScript 
	local script = Instance.new('LocalScript', Frame)

	local dragger = {}; 
	local resizer = {};
	
	do
		local mouse = game:GetService("Players").LocalPlayer:GetMouse();
		local inputService = game:GetService('UserInputService');
		local heartbeat = game:GetService("RunService").Heartbeat;
		-- // credits to Ririchi / Inori for this cute drag function :)
		function dragger.new(frame)
			local s, event = pcall(function()
				return frame.MouseEnter
			end)
	
			if s then
				frame.Active = true;
	
				event:connect(function()
					local input = frame.InputBegan:connect(function(key)
						if key.UserInputType == Enum.UserInputType.MouseButton1 then
							local objectPosition = Vector2.new(mouse.X - frame.AbsolutePosition.X, mouse.Y - frame.AbsolutePosition.Y);
							while heartbeat:wait() and inputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
								frame:TweenPosition(UDim2.new(0, mouse.X - objectPosition.X + (frame.Size.X.Offset * frame.AnchorPoint.X), 0, mouse.Y - objectPosition.Y + (frame.Size.Y.Offset * frame.AnchorPoint.Y)), 'Out', 'Quad', 0.1, true);
							end
						end
					end)
	
					local leave;
					leave = frame.MouseLeave:connect(function()
						input:disconnect();
						leave:disconnect();
					end)
				end)
			end
		end
	
		function resizer.new(p, s)
			p:GetPropertyChangedSignal('AbsoluteSize'):connect(function()
				s.Size = UDim2.new(s.Size.X.Scale, s.Size.X.Offset, s.Size.Y.Scale, p.AbsoluteSize.Y);
			end)
		end
	end
	script.Parent.Active = true
	script.Parent.Draggable = true
end
coroutine.wrap(EKGC_fake_script)()
