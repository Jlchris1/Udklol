-- NPC Advanced Tools GUI (Fixed tracker + no duplicate billboards + full features)
-- Place in StarterGui > LocalScript

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- CONFIG
local GUI_WIDTH = 280
local VOID_Y = -500
local TWEEN_TIME = 2
local TWEEN_INFO = TweenInfo.new(TWEEN_TIME, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local LOOP_DELAY = 0.6
local SEVERE_DISTANCE = 500
local TRACK_REFRESH = 0.6 -- how often scanner looks for new NPCs

-- ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "NPC_AdvancedTools"
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true
ScreenGui.Parent = PlayerGui

-- Main frame
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, GUI_WIDTH, 0, 34)
MainFrame.Position = UDim2.new(1, - (GUI_WIDTH * 2) - 20, 0, 60)
MainFrame.BackgroundColor3 = Color3.fromRGB(25,25,25)
MainFrame.BorderSizePixel = 0
MainFrame.ClipsDescendants = true
MainFrame.Parent = ScreenGui

-- Toggle button
local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(1,0,0,34)
ToggleButton.BackgroundColor3 = Color3.fromRGB(44,44,44)
ToggleButton.BorderSizePixel = 0
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextSize = 15
ToggleButton.TextColor3 = Color3.new(1,1,1)
ToggleButton.Text = "âš™ NPC Tools"
ToggleButton.Parent = MainFrame

-- ScrollingFrame for content
local ScrollFrame = Instance.new("ScrollingFrame")
ScrollFrame.Size = UDim2.new(1,0,1, -34)
ScrollFrame.Position = UDim2.new(0,0,0,34)
ScrollFrame.BackgroundColor3 = Color3.fromRGB(32,32,32)
ScrollFrame.BorderSizePixel = 0
ScrollFrame.CanvasSize = UDim2.new(0,0,0,0)
ScrollFrame.ScrollBarThickness = 8
ScrollFrame.Visible = false
ScrollFrame.Parent = MainFrame

-- Layout
local listLayout = Instance.new("UIListLayout")
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Padding = UDim.new(0,6)
listLayout.Parent = ScrollFrame

-- Helpers
local function makeRow(text,width)
	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(1, -12, 0, 34)
	frame.BackgroundTransparency = 1

	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(width or 0.78,0,1,0)
	btn.Position = UDim2.new(0,0,0,0)
	btn.BackgroundColor3 = Color3.fromRGB(58,58,58)
	btn.BorderSizePixel = 0
	btn.Font = Enum.Font.Gotham
	btn.TextSize = 14
	btn.TextColor3 = Color3.new(1,1,1)
	btn.Text = text
	btn.Parent = frame

	local loopBtn = Instance.new("TextButton")
	loopBtn.Size = UDim2.new(0.18,0,1,0)
	loopBtn.Position = UDim2.new(0.82,6,0,0)
	loopBtn.BackgroundColor3 = Color3.fromRGB(40,40,40)
	loopBtn.BorderSizePixel = 0
	loopBtn.Font = Enum.Font.Gotham
	loopBtn.TextSize = 12
	loopBtn.TextColor3 = Color3.new(1,1,1)
	loopBtn.Text = "Loop: Off"
	loopBtn.Parent = frame

	frame.Parent = ScrollFrame
	return btn, loopBtn
end

local function makeTextRow(defaultText)
	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(1, -12, 0, 34)
	frame.BackgroundTransparency = 1

	local box = Instance.new("TextBox")
	box.Size = UDim2.new(0.7,0,1,0)
	box.Position = UDim2.new(0,0,0,0)
	box.Text = defaultText
	box.BackgroundColor3 = Color3.fromRGB(50,50,50)
	box.TextColor3 = Color3.new(1,1,1)
	box.Font = Enum.Font.Gotham
	box.TextSize = 14
	box.ClearTextOnFocus = false
	box.PlaceholderText = defaultText
	box.Parent = frame

	local loopBtn = Instance.new("TextButton")
	loopBtn.Size = UDim2.new(0.3, -6,1,0)
	loopBtn.Position = UDim2.new(0.7,6,0,0)
	loopBtn.BackgroundColor3 = Color3.fromRGB(80,80,40)
	loopBtn.Text = "Loop: Off"
	loopBtn.Font = Enum.Font.Gotham
	loopBtn.TextSize = 14
	loopBtn.TextColor3 = Color3.new(1,1,1)
	loopBtn.BorderSizePixel = 0
	loopBtn.Parent = frame

	frame.Parent = ScrollFrame
	return box, loopBtn
end

-- LOOP STATE
local loops = {}
local loopRunners = {}

-- NPC detection (only models containing a Humanoid and HRP; excludes players)
local function getNPCs()
	local npcs = {}
	for _, hum in ipairs(Workspace:GetDescendants()) do
		if hum:IsA("Humanoid") then
			local model = hum.Parent
			if model and model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") and not Players:GetPlayerFromCharacter(model) then
				table.insert(npcs, model)
			end
		end
	end
	return npcs
end

local function iterateParts(npc, fn)
	for _, p in ipairs(npc:GetDescendants()) do
		if p:IsA("BasePart") then pcall(function() fn(p) end) end
	end
end

-- FUNCTIONS (unchanged behavior)
local function safeTweenToVoid(npc)
	local parts = {}
	for _, p in ipairs(npc:GetDescendants()) do
		if p:IsA("BasePart") then table.insert(parts,p) end
	end
	if #parts==0 then return end

	local minY = math.huge
	for _, p in ipairs(parts) do
		local bottom = p.Position.Y - p.Size.Y/2
		if bottom<minY then minY = bottom end
	end
	local shift = (VOID_Y + 3) - minY

	local collisions = {}
	for _, p in ipairs(parts) do
		collisions[p] = p.CanCollide
		p.CanCollide = false
	end

	local tweens = {}
	for _, p in ipairs(parts) do
		local goal = {CFrame = p.CFrame + Vector3.new(0,shift,0)}
		table.insert(tweens,TweenService:Create(p,TWEEN_INFO,goal))
	end
	for _, tw in ipairs(tweens) do pcall(function() tw:Play() end) end
	task.wait(TWEEN_TIME + 0.05)
	for _, p in ipairs(parts) do p.Velocity = Vector3.new(0,-200,0) end
	task.delay(0.4,function()
		for p,_ in pairs(collisions) do p.CanCollide = collisions[p] end
	end)
end

local function setCurrentHPNaN(npc)
	local hum = npc:FindFirstChildOfClass("Humanoid")
	if hum then pcall(function() hum.Health = 0/0 end) end
end

local function healTick(npc, amt)
	local hum = npc:FindFirstChildOfClass("Humanoid")
	if hum then pcall(function() hum.Health = math.min(hum.MaxHealth or hum.Health, hum.Health + amt) end) end
end

local function setSpeed(npc,val)
	local hum = npc:FindFirstChildOfClass("Humanoid")
	if hum then pcall(function() hum.WalkSpeed = val end) end
end

local function setJump(npc,val)
	local hum = npc:FindFirstChildOfClass("Humanoid")
	if hum then pcall(function()
		if hum.JumpPower ~= nil then hum.JumpPower = val else hum.JumpHeight = val end
	end) end
end

-- ROWS (UI)
local gravBox, gravLoopBtn = makeTextRow("Gravity Value")
local speedBox, speedLoopBtn = makeTextRow("NPC Speed")
local jumpBox, jumpLoopBtn = makeTextRow("NPC JumpPower")
local tweenBtn, tweenLoopBtn = makeRow("Tween NPCs to Void")
local infBtn, infLoopBtn = makeRow("Set Current HP = 0/0")
local healBox, healBtn = makeTextRow("Heal per tick")
local viewBtn, viewLoopBtn = makeRow("View NPCs Tracker") -- kept original style

-- LOOP HELPER (keeps your previous loop toggles)
local function startLoop(key,func)
	if loopRunners[key] then return end
	loops[key]=true
	local co = coroutine.create(function()
		while loops[key] do
			for _,npc in ipairs(getNPCs()) do pcall(function() func(npc) end) end
			task.wait(LOOP_DELAY)
		end
		loopRunners[key]=nil
	end)
	loopRunners[key]=co
	coroutine.resume(co)
end
local function stopLoop(key) loops[key]=false end

local function attachLoopToggle(box,btn,key,func)
	btn.MouseButton1Click:Connect(function()
		loops[key]=not loops[key]
		btn.Text="Loop: "..(loops[key] and "On" or "Off")
		if loops[key] then startLoop(key,function(npc)
			local val=tonumber(box.Text)
			if val then func(npc,val) end
		end)
		else stopLoop(key) end
	end)
	box.FocusLost:Connect(function()
		local val = tonumber(box.Text)
		if val then
			for _,npc in ipairs(getNPCs()) do func(npc,val) end
		end
	end)
end

attachLoopToggle(gravBox,gravLoopBtn,"gravity",function(_,v) workspace.Gravity=v end)
attachLoopToggle(speedBox,speedLoopBtn,"speed",setSpeed)
attachLoopToggle(jumpBox,jumpLoopBtn,"jump",setJump)

-- OTHER BUTTONS (keep behavior)
tweenBtn.MouseButton1Click:Connect(function() for _,npc in ipairs(getNPCs()) do safeTweenToVoid(npc) end end)
infBtn.MouseButton1Click:Connect(function() for _,npc in ipairs(getNPCs()) do setCurrentHPNaN(npc) end end)
healBtn.MouseButton1Click:Connect(function() local amt=tonumber(healBox.Text) or 0 for _,npc in ipairs(getNPCs()) do healTick(npc,amt) end end)

-- Tracker UI elements
local trackerBtn = viewBtn -- reuse viewBtn to keep layout consistent
trackerBtn.Text = "Toggle NPC Tracker"

local modeDropdown = Instance.new("TextButton")
modeDropdown.Size = UDim2.new(0.38,0,0,34)
modeDropdown.Position = UDim2.new(0.62,0,0,0)
modeDropdown.BackgroundColor3 = Color3.fromRGB(80,80,40)
modeDropdown.BorderSizePixel = 0
modeDropdown.Font = Enum.Font.Gotham
modeDropdown.TextSize = 14
modeDropdown.TextColor3 = Color3.new(1,1,1)
modeDropdown.Text = "Mode: Clean"
modeDropdown.Parent = ScrollFrame

local modes = {"Clean","Medium","Severe"}
local modeIndex = 1
modeDropdown.MouseButton1Click:Connect(function()
	modeIndex = modeIndex % #modes + 1
	modeDropdown.Text = "Mode: "..modes[modeIndex]
end)

-- Remove tools button
local removeToolsBtn = Instance.new("TextButton")
removeToolsBtn.Size = UDim2.new(1,0,0,34)
removeToolsBtn.BackgroundColor3 = Color3.fromRGB(70,40,40)
removeToolsBtn.BorderSizePixel = 0
removeToolsBtn.Font = Enum.Font.Gotham
removeToolsBtn.TextSize = 14
removeToolsBtn.TextColor3 = Color3.new(1,1,1)
removeToolsBtn.Text = "Remove NPC Tools"
removeToolsBtn.Parent = ScrollFrame

-- TRACKER: no duplicates, cleans only when necessary
local trackedNPCs = {} -- [model] = {gui=..., label=...}
local trackerActive = false
local trackerHeartbeatConn = nil
local trackerScannerThread = nil

local function safeHasBillboard(hrp)
	if not hrp then return false end
	return hrp:FindFirstChild("NPCTracker") ~= nil
end

local function addNPCToTracker(npc)
	if not npc or trackedNPCs[npc] then return end
	local hrp = npc:FindFirstChild("HumanoidRootPart")
	if not hrp then return end
	-- don't add if already has a billboard (created outside this script)
	if safeHasBillboard(hrp) then
		-- we still record it so we don't try to create again
		local existingGui = hrp:FindFirstChild("NPCTracker")
		if existingGui and existingGui:IsA("BillboardGui") then
			local label = existingGui:FindFirstChildOfClass("TextLabel")
			trackedNPCs[npc] = {gui = existingGui, label = label}
		end
		return
	end

	-- create a unique billboard and tag it with Name "NPCTracker"
	local ok,err = pcall(function()
		local gui = Instance.new("BillboardGui")
		gui.Name = "NPCTracker"
		gui.Size = UDim2.new(0,220,0,60)
		gui.StudsOffset = Vector3.new(0,4,0)
		gui.AlwaysOnTop = true
		gui.Parent = hrp

		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1,-6,1,-6)
		label.Position = UDim2.new(0,3,0,3)
		label.BackgroundTransparency = 1
		label.TextColor3 = Color3.new(1,1,1)
		label.Font = Enum.Font.Code
		label.TextScaled = true
		label.Parent = gui

		trackedNPCs[npc] = {gui = gui, label = label}
	end)
	if not ok then
		-- if creation failed, ensure nothing half-created remains
		if err then
			-- ignore, but prevent repeated attempts by marking as tried
			trackedNPCs[npc] = nil
		end
	end
end

local function removeNPCFromTracker(npc)
	local data = trackedNPCs[npc]
	if data and data.gui then
		pcall(function() data.gui:Destroy() end)
	end
	trackedNPCs[npc] = nil
end

local function updateTracker()
	local playerPos = player.Character and player.Character.PrimaryPart and player.Character.PrimaryPart.Position
	-- cleanup first: destroyed or voided
	for npc, data in pairs(trackedNPCs) do
		if not npc.Parent or not npc:FindFirstChild("HumanoidRootPart") then
			-- NPC removed
			removeNPCFromTracker(npc)
		else
			local hrp = npc:FindFirstChild("HumanoidRootPart")
			if hrp and hrp.Position.Y < VOID_Y then
				-- fell in void
				removeNPCFromTracker(npc)
			end
		end
	end

	-- update labels in-place (cheap)
	for npc, data in pairs(trackedNPCs) do
		if data and data.label and npc.Parent then
			local hum = npc:FindFirstChildOfClass("Humanoid")
			if hum then
				local walk = hum.WalkSpeed or 0
				local jp = hum.JumpPower or hum.JumpHeight or 0
				local hp = hum.Health or 0
				local dist = 0
				local hrp = npc:FindFirstChild("HumanoidRootPart")
				if playerPos and hrp then dist = (hrp.Position - playerPos).Magnitude end
				data.label.Text = string.format("%s\nHP: %.1f | Speed: %.1f | JP: %.1f\nDist: %.1f studs", npc.Name, hp, walk, jp, dist)
			end
		end
	end
end

-- scanner loop only looks for NEW NPCs and adds them (no duplicates)
local function scannerLoop()
	while trackerActive do
		local playerPos = player.Character and player.Character.PrimaryPart and player.Character.PrimaryPart.Position
		for _, npc in ipairs(getNPCs()) do
			-- skip if already tracked
			if not trackedNPCs[npc] then
				-- apply mode filters before adding
				local hrp = npc:FindFirstChild("HumanoidRootPart")
				local hum = npc:FindFirstChildOfClass("Humanoid")
				if hrp and hum then
					local allow = true
					if modes[modeIndex] == "Medium" then
						if hrp.Anchored or (hum and hum.WalkSpeed == 0) then allow = false end
					elseif modes[modeIndex] == "Severe" then
						if hrp.Anchored then allow = false end
						if playerPos and (hrp.Position - playerPos).Magnitude > SEVERE_DISTANCE then allow = false end
					end
					if allow then
						addNPCToTracker(npc)
					end
				end
			end
		end
		task.wait(TRACK_REFRESH)
	end
end

-- Tracker toggle: start heartbeat updater + scanner loop, and stop cleanly
trackerBtn.MouseButton1Click:Connect(function()
	trackerActive = not trackerActive
	if trackerActive then
		-- start heartbeat short-updates
		if not trackerHeartbeatConn then
			trackerHeartbeatConn = RunService.Heartbeat:Connect(function()
				-- cheap update: only refresh labels and cleanup
				updateTracker()
			end)
		end
		-- start scanner in background to find new NPCs
		if not trackerScannerThread then
			trackerScannerThread = task.spawn(function()
				scannerLoop()
				trackerScannerThread = nil
			end)
		end
	else
		-- stop heartbeat + scanner flag (scannerLoop exits because trackerActive=false)
		if trackerHeartbeatConn then trackerHeartbeatConn:Disconnect() trackerHeartbeatConn = nil end
		trackerActive = false
		-- destroy all tracked guis
		for npc, data in pairs(trackedNPCs) do
			if data and data.gui then
				pcall(function() data.gui:Destroy() end)
			end
			trackedNPCs[npc] = nil
		end
		-- make sure any residual external billboards named NPCTracker are removed for cleanliness
		for _, npc in ipairs(getNPCs()) do
			local hrp = npc:FindFirstChild("HumanoidRootPart")
			if hrp then
				local g = hrp:FindFirstChild("NPCTracker")
				if g and g:IsA("BillboardGui") then
					pcall(function() g:Destroy() end)
				end
			end
		end
	end
end)

-- Remove tools button
local removeTools = Instance.new("TextButton")
removeTools.Size = UDim2.new(1,0,0,34)
removeTools.BackgroundColor3 = Color3.fromRGB(70,40,40)
removeTools.BorderSizePixel = 0
removeTools.Font = Enum.Font.Gotham
removeTools.TextSize = 14
removeTools.TextColor3 = Color3.new(1,1,1)
removeTools.Text = "Remove NPC Tools"
removeTools.Parent = ScrollFrame

removeTools.MouseButton1Click:Connect(function()
	for _, npc in ipairs(getNPCs()) do
		for _, tool in ipairs(npc:GetChildren()) do
			if tool:IsA("Tool") then pcall(function() tool:Destroy() end) end
		end
	end
end)

-- TOGGLE GUI
local open=false
ToggleButton.MouseButton1Click:Connect(function()
	open=not open
	ScrollFrame.Visible=open
	local size=open and UDim2.new(0,GUI_WIDTH,0,400) or UDim2.new(0,GUI_WIDTH,0,34)
	TweenService:Create(MainFrame,TweenInfo.new(0.22,Enum.EasingStyle.Sine,Enum.EasingDirection.Out),{Size=size}):Play()
end)

print("[NPC_AdvancedTools] Loaded. Tracker fixed: no duplicates, safe scanning, cleans up properly.")
